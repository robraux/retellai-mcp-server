openapi: 3.0.3
info:
  title: Retell SDK
  version: 3.0.0
  contact:
    name: Retell Support
    url: https://www.retellai.com/
    email: support@retellai.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://api.retellai.com
    description: The production server.

components:
  securitySchemes:
    api_key: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: string # optional, arbitrary value for documentation purposes
      description:
        Authentication header containing API key (find it in dashboard). The
        format is "Bearer YOUR_API_KEY"

  schemas:
    V2CallBase:
      type: object
      required: [call_id, agent_id, agent_version, call_status]
      properties:
        call_id:
          type: string
          example: Jabr9TXYYJHfvl6Syypi88rdAHYHmcq6
          description:
            Unique id of the call. Used to identify in LLM websocket and used to
            authenticate in audio websocket.
        agent_id:
          type: string
          example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
          description: Corresponding agent id of this call.
        agent_version:
          type: integer
          example: 1
          description: The version of the agent.
        call_status:
          type: string
          enum: [registered, not_connected, ongoing, ended, error]
          example: registered
          description:
            "Status of call.\n\n- `registered`: Call id issued, starting to make
            a call using this id.\n\n- `ongoing`: Call connected and
            ongoing.\n\n- `ended`: The underlying websocket has ended for the
            call. Either user or agent hanged up, or call transferred. \n\n-
            `error`: Call encountered error."
        metadata:
          type: object
          description:
            An arbitrary object for storage purpose only. You can put anything
            here like your internal customer id associated with the call. Not
            used for processing. You can later get this field from the call
            object.
        retell_llm_dynamic_variables:
          type: object
          additionalProperties: {}
          example: { "customer_name": "John Doe" }
          description:
            Add optional dynamic variables in key value pairs of string that
            injects into your Response Engine prompt and tool description. Only
            applicable for Response Engine.
        collected_dynamic_variables:
          type: object
          additionalProperties: {}
          example: { "last_node_name": "Test node" }
          description:
            Dynamic variables collected from the call. Only available after the
            call ends.
        custom_sip_headers:
          type: object
          additionalProperties:
            type: string
          description: Custom SIP headers to be added to the call.
          example: { "X-Custom-Header": "Custom Value" }
        opt_out_sensitive_data_storage:
          type: boolean
          example: true
          description:
            Whether this call opts out of sensitive data storage like
            transcript, recording, logging.
        opt_in_signed_url:
          type: boolean
          example: true
          description:
            Whether this agent opts in for signed URLs for public logs and
            recordings. When enabled, the generated URLs will include security
            signatures that restrict access and automatically expire after 24
            hours.
        start_timestamp:
          type: integer
          example: 1703302407333
          description:
            Begin timestamp (milliseconds since epoch) of the call. Available
            after call starts.
        end_timestamp:
          type: integer
          example: 1703302428855
          description:
            End timestamp (milliseconds since epoch) of the call. Available
            after call ends.
        duration_ms:
          type: integer
          example: 10000
          description:
            Duration of the call in milliseconds. Available after call ends.
        transcript:
          type: string
          example: "Agent: hi how are you doing?\nUser: Doing pretty well. How
            are you?\nAgent: That's great to hear! I'm doing well too, thanks!
            What's up?\nUser: I don't have anything in particular.\nAgent: Got
            it, just checking in!\nUser: Alright. See you.\nAgent: have a nice
            day\n
            "
          description: Transcription of the call. Available after call ends.
        transcript_object:
          type: array
          items:
            $ref: "#/components/schemas/Utterance"
          description:
            Transcript of the call in the format of a list of utterance, with
            timestamp. Available after call ends.
        transcript_with_tool_calls:
          type: array
          items:
            $ref: "#/components/schemas/UtteranceOrToolCall"
          description:
            Transcript of the call weaved with tool call invocation and results.
            It precisely captures when (at what utterance, which word) the tool
            was invoked and what was the result. Available after call ends.
        recording_url:
          type: string
          example: "https://retellai.s3.us-west-2.amazonaws.com/Jabr9TXYYJHfvl6Syypi88rdAHYHmcq6/recording.wav"
          description: Recording of the call. Available after call ends.
        public_log_url:
          type: string
          example: "https://retellai.s3.us-west-2.amazonaws.com/Jabr9TXYYJHfvl6Syypi88rdAHYHmcq6/public_log.txt"
          description:
            Public log of the call, containing details about all the requests
            and responses received in LLM WebSocket, latency tracking for each
            turntaking, helpful for debugging and tracing. Available after call
            ends.
        knowledge_base_retrieved_contents_url:
          type: string
          example: "https://retellai.s3.us-west-2.amazonaws.com/Jabr9TXYYJHfvl6Syypi88rdAHYHmcq6/kb_retrieved_contents.txt"
          description:
            URL to the knowledge base retrieved contents of the call. Available
            after call ends if the call utilizes knowledge base feature. It
            consists of the respond id and the retrieved contents related to
            that response. It's already rendered in call history tab of
            dashboard, and you can also manually download and check against the
            transcript to view the knowledge base retrieval results.
        latency:
          type: object
          description:
            Latency tracking of the call, available after call ends. Not all
            fields here will be available, as it depends on the type of call and
            feature used.
          properties:
            e2e:
              description:
                End to end latency (from user stops talking to agent start
                talking) tracking of the call. This latency does not account for
                the network trip time from Retell server to user frontend. The
                latency is tracked every time turn change between user and
                agent.
              $ref: "#/components/schemas/CallLatency"
            llm:
              description:
                LLM latency (from issue of LLM call to first speakable chunk
                received) tracking of the call. When using custom LLM. this
                latency includes LLM websocket roundtrip time between user
                server and Retell server.
              $ref: "#/components/schemas/CallLatency"
            llm_websocket_network_rtt:
              description:
                LLM websocket roundtrip latency (between user server and Retell
                server) tracking of the call. Only populated for calls using
                custom LLM.
              $ref: "#/components/schemas/CallLatency"
            tts:
              description:
                Text-to-speech latency (from the triggering of TTS to first byte
                received) tracking of the call.
              $ref: "#/components/schemas/CallLatency"
            knowledge_base:
              description:
                Knowledge base latency (from the triggering of knowledge base
                retrival to all relevant context received) tracking of the call.
                Only populated when using knowledge base feature for the agent
                of the call.
              $ref: "#/components/schemas/CallLatency"
            s2s:
              description:
                Speech-to-speech latency (from requesting responses of a S2S
                model to first byte received) tracking of the call. Only
                populated for calls that uses S2S model like Realtime API.
              $ref: "#/components/schemas/CallLatency"
        disconnection_reason:
          type: string
          enum:
            [
              user_hangup,
              agent_hangup,
              call_transfer,
              voicemail_reached,
              inactivity,
              max_duration_reached,
              concurrency_limit_reached,
              no_valid_payment,
              scam_detected,
              dial_busy,
              dial_failed,
              dial_no_answer,
              invalid_destination,
              telephony_provider_permission_denied,
              telephony_provider_unavailable,
              sip_routing_error,
              marked_as_spam,
              user_declined,
              error_llm_websocket_open,
              error_llm_websocket_lost_connection,
              error_llm_websocket_runtime,
              error_llm_websocket_corrupt_payload,
              error_no_audio_received,
              error_asr,
              error_retell,
              error_unknown,
              error_user_not_joined,
              registered_call_timeout,
            ]
          example: agent_hangup
          description:
            The reason for the disconnection of the call. Read details
            desciption about reasons listed here at [Disconnection Reason
            Doc](/reliability/debug-call-disconnect#understanding-disconnection-reasons).
        call_analysis:
          description:
            Post call analysis that includes information such as sentiment,
            status, summary, and custom defined data to extract. Available after
            call ends. Subscribe to `call_analyzed` webhook event type to
            receive it once ready.
          $ref: "#/components/schemas/CallAnalysis"
        call_cost:
          description:
            Cost of the call, including all the products and their costs and
            discount.
          type: object
          required:
            - product_costs
            - total_duration_seconds
            - total_duration_unit_price
            - combined_cost
          properties:
            product_costs:
              type: array
              description:
                List of products with their unit prices and costs in cents
              items:
                $ref: "#/components/schemas/ProductCost"
            total_duration_seconds:
              type: number
              description: Total duration of the call in seconds
              example: 60
            total_duration_unit_price:
              type: number
              description:
                Total unit duration price of all products in cents per second
              example: 1
            combined_cost:
              type: number
              description: Combined cost of all individual costs in cents
              example: 70
        llm_token_usage:
          type: object
          description:
            LLM token usage of the call, available after call ends. Not
            populated if using custom LLM, realtime API, or no LLM call is made.
          required:
            - values
            - average
            - num_requests
          properties:
            values:
              type: array
              items:
                type: number
              description: All the token count values in the call.
            average:
              type: number
              description: Average token count of the call.
            num_requests:
              type: number
              description: Number of requests made to the LLM.

    V2WebCallResponse:
      allOf:
        - type: object
          required: [call_type, access_token]
          properties:
            call_type:
              type: string
              enum: [web_call]
              example: web_call
              description:
                Type of the call. Used to distinguish between web call and phone
                call.
            access_token:
              type: string
              example: eyJhbGciOiJIUzI1NiJ9.eyJ2aWRlbyI6eyJyb29tSm9p
              description:
                Access token to enter the web call room. This needs to be passed
                to your frontend to join the call.
        - $ref: "#/components/schemas/V2CallBase"

    V2PhoneCallResponse:
      allOf:
        - type: object
          required: [call_type, from_number, to_number, direction]
          properties:
            call_type:
              type: string
              enum: [phone_call]
              example: phone_call
              description:
                Type of the call. Used to distinguish between web call and phone
                call.
            from_number:
              type: string
              example: "+12137771234"
              description: The caller number.
            to_number:
              type: string
              example: "+12137771235"
              description: The callee number.
            direction:
              type: string
              enum: [inbound, outbound]
              example: inbound
              description: Direction of the phone call.
            telephony_identifier:
              type: object
              description:
                Telephony identifier of the call, populated when available.
                Tracking purposes only.
              properties:
                twilio_call_sid:
                  type: string
                  example: "CA5d0d0d8047bf685c3f0ff980fe62c123"
                  description: Twilio call sid.
        - $ref: "#/components/schemas/V2CallBase"

    V2CallResponse:
      oneOf:
        - $ref: "#/components/schemas/V2WebCallResponse"
        - $ref: "#/components/schemas/V2PhoneCallResponse"

    ChatResponse:
      type: object
      required: [chat_id, agent_id, chat_status]
      properties:
        chat_id:
          type: string
          example: Jabr9TXYYJHfvl6Syypi88rdAHYHmcq6
          description: Unique id of the chat.
        agent_id:
          type: string
          example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
          description: Corresponding chat agent id of this chat.
        retell_llm_dynamic_variables:
          type: object
          additionalProperties: {}
          example: { "customer_name": "John Doe" }
          description:
            Add optional dynamic variables in key value pairs of string that
            injects into your Response Engine prompt and tool description. Only
            applicable for Response Engine.
        collected_dynamic_variables:
          type: object
          additionalProperties: {}
          example: { "last_node_name": "Test node" }
          description:
            Dynamic variables collected from the chat. Only available after the
            chat ends.
        chat_status:
          type: string
          enum: [ongoing, ended, error]
          example: ongoing
          description:
            "Status of chat. \n\n- `ongoing`: Chat session is ongoing, chat
            agent can receive new message and generate response. \n\n- `ended`:
            Chat session has ended can not generate new response. \n\n- `error`:
            Chat encountered error."
        start_timestamp:
          type: integer
          example: 1703302407333
          description:
            Begin timestamp (milliseconds since epoch) of the chat. Available
            after chat starts.
        end_timestamp:
          type: integer
          example: 1703302428855
          description:
            End timestamp (milliseconds since epoch) of the chat. Available
            after chat ends.
        transcript:
          type: string
          example:
            "Agent: hi how are you doing?\nUser: Doing pretty well. How are
            you?\nAgent: That's great to hear! I'm doing well too, thanks!
            What's up?\nUser: I don't have anything in particular.\nAgent: Got
            it, just checking in!\nUser: Alright. See you.\nAgent: have a nice
            day\n"
          description: Transcription of the chat.
        message_with_tool_calls:
          type: array
          items:
            $ref: "#/components/schemas/MessageOrToolCall"
          description:
            Transcript of the chat weaved with tool call invocation and results.
        metadata:
          type: object
          description:
            An arbitrary object for storage purpose only. You can put anything
            here like your internal customer id associated with the chat. Not
            used for processing. You can later get this field from the chat
            object.
        chat_cost:
          type: object
          properties:
            product_costs:
              type: array
              description:
                List of products with their unit prices and costs in cents
              items:
                $ref: "#/components/schemas/ProductCost"
            combined_cost:
              type: number
              description: Combined cost of all individual costs in cents
              example: 70
        chat_analysis:
          description:
            Post chat analysis that includes information such as sentiment,
            status, summary, and custom defined data to extract. Available after
            chat ends. Subscribe to `chat_analyzed` webhook event type to
            receive it once ready.
          $ref: "#/components/schemas/ChatAnalysis"

    ToolCallInvocationUtterance:
      type: object
      required: [role, tool_call_id, name, arguments]
      properties:
        role:
          type: string
          enum: [tool_call_invocation]
          description: This is a tool call invocation.
        tool_call_id:
          type: string
          description: Tool call id, globally unique.
        name:
          type: string
          description: Name of the function in this tool call.
        arguments:
          type: string
          description:
            Arguments for this tool call, it's a stringified JSON object.

    ToolCallResultUtterance:
      type: object
      required: [role, tool_call_id, content]
      properties:
        role:
          type: string
          enum: [tool_call_result]
          description: This is result of a tool call.
        tool_call_id:
          type: string
          description: Tool call id, globally unique.
        content:
          type: string
          description:
            Result of the tool call, can be a string, a stringified json, etc.

    Utterance:
      type: object
      required: [role, content, words]
      properties:
        role:
          type: string
          enum: [agent, user, transfer_target]
          description:
            Documents whether this utterance is spoken by agent or user.
          example: agent
        content:
          type: string
          description: Transcript of the utterances.
          example: hi how are you doing?
        words:
          type: array
          example: [{ word: "hi", start: 0.7, end: 1.3 }]
          description:
            Array of words in the utterance with the word timestamp. Useful for
            understanding what word was spoken at what time. Note that the word
            timestamp is not guaranteed to be accurate, it's more like an
            approximation.
          items:
            type: object
            properties:
              word:
                type: string
                description: Word transcript (with punctuation if applicable).
              start:
                type: number
                description:
                  Start time of the word in the call in second. This is relative
                  audio time, not wall time.
              end:
                type: number
                description:
                  End time of the word in the call in second. This is relative
                  audio time, not wall time.

    DTMFUtterance:
      type: object
      required: [role, digit]
      properties:
        role:
          type: string
          enum: [dtmf]
          description: This is user pressed digit from their phone keypad.
        digit:
          type: string
          description:
            The digit pressed by the user. Will be a single digit string like
            "1", "2", "3", "*", "#" etc.
          example: "1"

    UtteranceOrToolCall:
      oneOf:
        - $ref: "#/components/schemas/Utterance"
        - $ref: "#/components/schemas/ToolCallInvocationUtterance"
        - $ref: "#/components/schemas/ToolCallResultUtterance"
        - $ref: "#/components/schemas/DTMFUtterance"

    Message:
      type: object
      required: [message_id, role, content, created_timestamp]
      properties:
        message_id:
          type: string
          example: Jabr9TXYYJHfvl6Syypi88rdAHYHmcq6
          description: Unique id ot the message
        role:
          type: string
          enum: [agent, user]
          description: Documents whether this message is sent by agent or user.
          example: agent
        content:
          type: string
          description: Content of the message
          example: hi how are you doing?
        created_timestamp:
          type: integer
          description: Create timestamp of the message
          example: 1703302428855

    ToolCallInvocationMessage:
      type: object
      required: [message_id, role, tool_call_id, name, arguments]
      properties:
        message_id:
          type: string
          example: Jabr9TXYYJHfvl6Syypi88rdAHYHmcq6
          description: Unique id ot the message
        role:
          type: string
          enum: [tool_call_invocation]
          description: This is a tool call invocation.
        tool_call_id:
          type: string
          description: Tool call id, globally unique.
        name:
          type: string
          description: Name of the function in this tool call.
        arguments:
          type: string
          description:
            Arguments for this tool call, it's a stringified JSON object.
        created_timestamp:
          type: integer
          description: Create timestamp of the message
          example: 1703302428855

    ToolCallResultMessage:
      type: object
      required: [message_id, role, tool_call_id, content, created_timestamp]
      properties:
        message_id:
          type: string
          example: Jabr9TXYYJHfvl6Syypi88rdAHYHmcq6
          description: Unique id ot the message
        role:
          type: string
          enum: [tool_call_result]
          description: This is result of a tool call.
        tool_call_id:
          type: string
          description: Tool call id, globally unique.
        content:
          type: string
          description:
            Result of the tool call, can be a string, a stringified json, etc.
        created_timestamp:
          type: integer
          description: Create timestamp of the message
          example: 1703302428855

    NodeTransitionMessage:
      type: object
      required: [message_id, role, created_timestamp]
      properties:
        message_id:
          type: string
          example: Jabr9TXYYJHfvl6Syypi88rdAHYHmcq6
          description: Unique id ot the message
        role:
          type: string
          enum: [node_transition]
          description: This is node transition.
        former_node_id:
          type: string
          description: Former node id
        former_node_name:
          type: string
          description: Former node name
        new_node_id:
          type: string
          description: New node id
        new_node_name:
          type: string
          description: New node name
        created_timestamp:
          type: integer
          description: Create timestamp of the message
          example: 1703302428855

    StateTransitionMessage:
      type: object
      required: [message_id, role, created_timestamp]
      properties:
        message_id:
          type: string
          example: Jabr9TXYYJHfvl6Syypi88rdAHYHmcq6
          description: Unique id ot the message
        role:
          type: string
          enum: [state_transition]
          description: This is state transition for .
        former_state_name:
          type: string
          description: Former state name
        new_state_name:
          type: string
          description: New state name
        created_timestamp:
          type: integer
          description: Create timestamp of the message
          example: 1703302428855

    MessageOrToolCall:
      oneOf:
        - $ref: "#/components/schemas/Message"
        - $ref: "#/components/schemas/ToolCallInvocationMessage"
        - $ref: "#/components/schemas/ToolCallResultMessage"
        - $ref: "#/components/schemas/NodeTransitionMessage"
        - $ref: "#/components/schemas/StateTransitionMessage"

    CallLatency:
      type: object
      properties:
        p50:
          type: number
          description: 50 percentile of latency, measured in milliseconds.
          example: 800
        p90:
          type: number
          description: 90 percentile of latency, measured in milliseconds.
          example: 1200
        p95:
          type: number
          description: 95 percentile of latency, measured in milliseconds.
          example: 1500
        p99:
          type: number
          description: 99 percentile of latency, measured in milliseconds.
          example: 2500
        max:
          type: number
          description: Maximum latency in the call, measured in milliseconds.
          example: 2700
        min:
          type: number
          description: Minimum latency in the call, measured in milliseconds.
          example: 500
        num:
          type: number
          description:
            Number of data points (number of times latency is tracked).
          example: 10
        values:
          type: array
          items:
            type: number
          description:
            All the latency data points in the call, measured in milliseconds.

    CallAnalysis:
      type: object
      properties:
        call_summary:
          type: string
          example:
            "The agent called the user to ask question about his purchase
            inquiry. The agent asked several questions regarding his preference
            and asked if user would like to book an appointment. The user
            happily agreed and scheduled an appointment next Monday 10am."
          description: A high level summary of the call.
        in_voicemail:
          type: boolean
          example: false
          description: Whether the call is entered voicemail.
        user_sentiment:
          type: string
          enum: [Negative, Positive, Neutral, Unknown]
          example: Positive
          description: Sentiment of the user in the call.
        call_successful:
          type: boolean
          example: true
          description:
            Whether the agent seems to have a successful call with the user,
            where the agent finishes the task, and the call was complete without
            being cutoff.
        custom_analysis_data:
          type: object
          description:
            Custom analysis data that was extracted based on the schema defined
            in agent post call analysis data. Can be empty if nothing is
            specified.

    ChatAnalysis:
      type: object
      properties:
        chat_summary:
          type: string
          example:
            "The agent messages user to ask question about his purchase inquiry.
            The agent asked several questions regarding his preference and asked
            if user would like to book an appointment. The user happily agreed
            and scheduled an appointment next Monday 10am."
          description: A high level summary of the chat.
        user_sentiment:
          type: string
          enum: [Negative, Positive, Neutral, Unknown]
          example: Positive
          description: Sentiment of the user in the chat.
        chat_successful:
          type: boolean
          example: true
          description:
            Whether the agent seems to have a successful chat with the user,
            where the agent finishes the task, and the call was complete without
            being cutoff.
        custom_analysis_data:
          type: object
          description:
            Custom analysis data that was extracted based on the schema defined
            in chat agent post chat analysis data. Can be empty if nothing is
            specified.

    ProductCost:
      type: object
      required:
        - product
        - unit_price
        - cost
      properties:
        product:
          type: string
          description: Product name that has a cost associated with it.
          example: "elevenlabs_tts"
        unit_price:
          type: number
          description: Unit price of the product in cents per second.
          example: 1
        cost:
          type: number
          description:
            Cost for the product in cents for the duration of the call.
          example: 60

    StringAnalysisData:
      type: object
      required: [type, name, description]
      properties:
        type:
          type: string
          enum: [string]
          description: Type of the variable to extract.
          example: string
        name:
          type: string
          description: Name of the variable.
          example: customer_name
        description:
          type: string
          description: Description of the variable.
          example: The name of the customer.
        examples:
          type: array
          items:
            type: string
          description:
            Examples of the variable value to teach model the style and syntax.
          example: ["John Doe", "Jane Smith"]

    EnumAnalysisData:
      type: object
      required: [type, name, description, choices]
      properties:
        type:
          type: string
          enum: [enum]
          description: Type of the variable to extract.
          example: enum
        name:
          type: string
          description: Name of the variable.
          example: product_rating
        description:
          type: string
          description: Description of the variable.
          example: Rating of the product.
        choices:
          type: array
          items:
            type: string
          description:
            The possible values of the variable, must be non empty array.
          example: ["good", "bad"]

    BooleanAnalysisData:
      type: object
      required: [type, name, description]
      properties:
        type:
          type: string
          enum: [boolean]
          description: Type of the variable to extract.
          example: boolean
        name:
          type: string
          description: Name of the variable.
          example: is_converted
        description:
          type: string
          description: Description of the variable.
          example: Whether the customer converted.

    NumberAnalysisData:
      type: object
      required: [type, name, description]
      properties:
        type:
          type: string
          enum: [number]
          description: Type of the variable to extract.
          example: number
        name:
          type: string
          description: Name of the variable.
          example: order_count
        description:
          type: string
          description: Description of the variable.
          example: How many the customer intend to order.

    AnalysisData:
      oneOf:
        - $ref: "#/components/schemas/StringAnalysisData"
        - $ref: "#/components/schemas/EnumAnalysisData"
        - $ref: "#/components/schemas/BooleanAnalysisData"
        - $ref: "#/components/schemas/NumberAnalysisData"

    ResponseEngineRetellLm:
      type: object
      required: [type, llm_id]
      properties:
        type:
          type: string
          enum: [retell-llm]
          description: type of the Response Engine.
        llm_id:
          type: string
          description: id of the Retell LLM Response Engine.
        version:
          type: number
          example: 0
          description: Version of the Retell LLM Response Engine.
          nullable: true

    ResponseEngineCustomLm:
      type: object
      required: [type, llm_websocket_url]
      properties:
        type:
          type: string
          enum: [custom-llm]
          description: type of the Response Engine.
        llm_websocket_url:
          type: string
          description: LLM websocket url of the custom LLM.

    ResponseEngineConversationFlow:
      type: object
      required: [type, conversation_flow_id]
      properties:
        type:
          type: string
          enum: [conversation-flow]
          description: type of the Response Engine.
        conversation_flow_id:
          type: string
          description: ID of the Conversation Flow Response Engine.
        version:
          type: number
          example: 0
          description: Version of the Conversation Flow Response Engine.
          nullable: true

    ResponseEngine:
      oneOf:
        - $ref: "#/components/schemas/ResponseEngineRetellLm"
        - $ref: "#/components/schemas/ResponseEngineCustomLm"
        - $ref: "#/components/schemas/ResponseEngineConversationFlow"

    VoicemailActionPrompt:
      type: object
      properties:
        type:
          type: string
          enum: [prompt]
          example: prompt
        text:
          type: string
          example: "Summarize the call in 2 sentences."
          description:
            The prompt used to generate the text to be spoken when the call is
            detected to be in voicemail.
      required: [type, text]

    VoicemailActionStaticText:
      type: object
      properties:
        type:
          type: string
          enum: [static_text]
          example: static_text
        text:
          type: string
          example: "Please give us a callback tomorrow at 10am."
          description:
            The text to be spoken when the call is detected to be in voicemail.
      required: [type, text]

    VoicemailActionHangup:
      type: object
      properties:
        type:
          type: string
          enum: [hangup]
          example: hangup
      required: [type]

    VoicemailAction:
      oneOf:
        - $ref: "#/components/schemas/VoicemailActionPrompt"
        - $ref: "#/components/schemas/VoicemailActionStaticText"
        - $ref: "#/components/schemas/VoicemailActionHangup"

    AgentRequest:
      type: object
      properties:
        response_engine:
          $ref: "#/components/schemas/ResponseEngine"
          description:
            The Response Engine to attach to the agent. It is used to generate
            responses for the agent. You need to create a Response Engine first
            before attaching it to an agent.
          example:
            {
              "type": "retell-llm",
              "llm_id": "llm_234sdertfsdsfsdf",
              "version": 0,
            }
        agent_name:
          type: string
          example: Jarvis
          description: The name of the agent. Only used for your own reference.
          nullable: true
        version:
          type: number
          example: 0
          description: Version of the agent.
          nullable: true
        voice_id:
          type: string
          example: 11labs-Adrian
          description:
            Unique voice id used for the agent. Find list of available voices
            and their preview in Dashboard.
        voice_model:
          type: string
          enum:
            [
              eleven_turbo_v2,
              eleven_flash_v2,
              eleven_turbo_v2_5,
              eleven_flash_v2_5,
              eleven_multilingual_v2,
              tts-1,
              gpt-4o-mini-tts,
              null,
            ]
          description:
            Optionally set the voice model used for the selected voice.
            Currently only elevenlab voices have voice model selections. Set to
            null to remove voice model selection, and default ones will apply.
            Check out the dashboard for details on each voice model.
          nullable: true
        fallback_voice_ids:
          type: array
          items:
            type: string
          example: ["openai-Alloy", "deepgram-Angus"]
          description:
            When TTS provider for the selected voice is experiencing outages, we
            would use fallback voices listed here for the agent. Voice id and
            the fallback voice ids must be from different TTS providers. The
            system would go through the list in order, if the first one in the
            list is also having outage, it would use the next one. Set to null
            to remove voice fallback for the agent.
          nullable: true
        voice_temperature:
          type: number
          example: 1
          description:
            Controls how stable the voice is. Value ranging from [0,2]. Lower
            value means more stable, and higher value means more variant speech
            generation. Currently this setting only applies to `11labs` voices.
            If unset, default value 1 will apply.
        voice_speed:
          type: number
          example: 1
          description:
            Controls speed of voice. Value ranging from [0.5,2]. Lower value
            means slower speech, while higher value means faster speech rate. If
            unset, default value 1 will apply.
        volume:
          type: number
          example: 1
          description:
            If set, will control the volume of the agent. Value ranging from
            [0,2]. Lower value means quieter agent speech, while higher value
            means louder agent speech. If unset, default value 1 will apply.
        responsiveness:
          type: number
          example: 1
          description:
            Controls how responsive is the agent. Value ranging from [0,1].
            Lower value means less responsive agent (wait more, respond slower),
            while higher value means faster exchanges (respond when it can). If
            unset, default value 1 will apply.
        interruption_sensitivity:
          type: number
          example: 1
          description:
            Controls how sensitive the agent is to user interruptions. Value
            ranging from [0,1]. Lower value means it will take longer / more
            words for user to interrupt agent, while higher value means it's
            easier for user to interrupt agent. If unset, default value 1 will
            apply. When this is set to 0, agent would never be interrupted.
        enable_backchannel:
          type: boolean
          example: true
          description:
            Controls whether the agent would backchannel (agent interjects the
            speaker with phrases like "yeah", "uh-huh" to signify interest and
            engagement). Backchannel when enabled tends to show up more in
            longer user utterances. If not set, agent will not backchannel.
        backchannel_frequency:
          type: number
          example: 0.9
          description:
            Only applicable when enable_backchannel is true. Controls how often
            the agent would backchannel when a backchannel is possible. Value
            ranging from [0,1]. Lower value means less frequent backchannel,
            while higher value means more frequent backchannel. If unset,
            default value 0.8 will apply.
        backchannel_words:
          type: array
          items:
            type: string
          example: ["yeah", "uh-huh"]
          description:
            Only applicable when enable_backchannel is true. A list of words
            that the agent would use as backchannel. If not set, default
            backchannel words will apply. Check out [backchannel default
            words](/agent/interaction-configuration#backchannel) for more
            details. Note that certain voices do not work too well with certain
            words, so it's recommended to expeirment before adding any words.
          nullable: true
        reminder_trigger_ms:
          type: number
          example: 10000
          description:
            If set (in milliseconds), will trigger a reminder to the agent to
            speak if the user has been silent for the specified duration after
            some agent speech. Must be a positive number. If unset, default
            value of 10000 ms (10 s) will apply.
        reminder_max_count:
          type: integer
          example: 2
          description:
            If set, controls how many times agent would remind user when user is
            unresponsive. Must be a non negative integer. If unset, default
            value of 1 will apply (remind once). Set to 0 to disable agent from
            reminding.
        ambient_sound:
          type: string
          enum:
            [
              coffee-shop,
              convention-hall,
              summer-outdoor,
              mountain-outdoor,
              static-noise,
              call-center,
              null,
            ]
          description: "If set, will add ambient environment sound to the call
            to make experience more realistic. Currently supports the following
            options:\n\n- `coffee-shop`: Coffee shop ambience with people
            chatting in background. [Listen to
            Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/coffee-shop.wav)\n\n-
            `convention-hall`: Convention hall ambience, with some echo and
            people chatting in background. [Listen to
            Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/convention-hall.wav)\n\n-
            `summer-outdoor`: Summer outdoor ambience with cicada chirping.
            [Listen to
            Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/summer-outdoor.wav)\n\n-
            `mountain-outdoor`: Mountain outdoor ambience with birds singing.
            [Listen to
            Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/mountain-outdoor.wav)\n\n-
            `static-noise`: Constant static noise. [Listen to
            Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/static-noise.wav)\n\n-
            `call-center`: Call center work noise. [Listen to
            Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/call-center.wav)\n\n
            Set to `null` to remove ambient sound from this agent.
            "
          nullable: true
        ambient_sound_volume:
          type: number
          example: 1
          description:
            If set, will control the volume of the ambient sound. Value ranging
            from [0,2]. Lower value means quieter ambient sound, while higher
            value means louder ambient sound. If unset, default value 1 will
            apply.
        language:
          type: string
          example: en-US
          enum:
            [
              "en-US",
              "en-IN",
              "en-GB",
              "en-AU",
              "en-NZ",
              "de-DE",
              "es-ES",
              "es-419",
              "hi-IN",
              "fr-FR",
              "fr-CA",
              "ja-JP",
              "pt-PT",
              "pt-BR",
              "zh-CN",
              "ru-RU",
              "it-IT",
              "ko-KR",
              "nl-NL",
              "nl-BE",
              "pl-PL",
              "tr-TR",
              "th-TH",
              "vi-VN",
              "ro-RO",
              "bg-BG",
              "ca-ES",
              "da-DK",
              "fi-FI",
              "el-GR",
              "hu-HU",
              "id-ID",
              "no-NO",
              "sk-SK",
              "sv-SE",
              "multi",
            ]
          description:
            Specifies what language (and dialect) the speech recognition will
            operate in. For instance, selecting `en-GB` optimizes speech
            recognition for British English. If unset, will use default value
            `en-US`. Select `multi` for multilingual support, currently this
            supports Spanish and English.
        webhook_url:
          type: string
          example: https://webhook-url-here
          description:
            The webhook for agent to listen to call events. See what events it
            would get at [webhook doc](/features/webhook). If set, will binds
            webhook events for this agent to the specified url, and will ignore
            the account level webhook for this agent. Set to `null` to remove
            webhook url from this agent.
          nullable: true
        boosted_keywords:
          type: array
          items:
            type: string
          example: ["retell", "kroger"]
          description:
            Provide a customized list of keywords to bias the transcriber model,
            so that these words are more likely to get transcribed. Commonly
            used for names, brands, street, etc.
          nullable: true
        opt_out_sensitive_data_storage:
          type: boolean
          example: true
          description:
            Whether this agent opts out of sensitive data storage like
            transcript, recording, logging, inbound/outbound phone numbers, etc.
            These data can still be accessed securely via webhooks. If not set,
            default value of false will apply.
        opt_in_signed_url:
          type: boolean
          example: true
          description:
            Whether this agent opts in for signed URLs for public logs and
            recordings. When enabled, the generated URLs will include security
            signatures that restrict access and automatically expire after 24
            hours.
        pronunciation_dictionary:
          type: array
          items:
            type: object
            required: [word, alphabet, phoneme]
            properties:
              word:
                type: string
                example: actually
                description:
                  The string of word / phrase to be annotated with
                  pronunciation.
              alphabet:
                type: string
                enum: [ipa, cmu]
                example: ipa
                description: The phonetic alphabet to be used for pronunciation.
              phoneme:
                type: string
                example: "ËˆÃ¦ktÊƒuÉ™li"
                description:
                  Pronunciation of the word in the format of a IPA / CMU
                  pronunciation.
          description:
            A list of words / phrases and their pronunciation to be used to
            guide the audio synthesize for consistent pronunciation. Currently
            only supported for English & 11labs voices. Set to null to remove
            pronunciation dictionary from this agent.
          nullable: true
        normalize_for_speech:
          type: boolean
          example: true
          description:
            If set to true, will normalize the some part of text (number,
            currency, date, etc) to spoken to its spoken form for more
            consistent speech synthesis (sometimes the voice synthesize system
            itself might read these wrong with the raw text). For example, it
            will convert "Call my number 2137112342 on Jul 5th, 2024 for the
            $24.12 payment" to "Call my number two one three seven one one two
            three four two on july fifth, twenty twenty four for the twenty four
            dollars twelve cents payment" before starting audio generation.
        end_call_after_silence_ms:
          type: integer
          example: 600000
          description:
            "If users stay silent for a period after agent speech, end the call.
            The minimum value allowed is 10,000 ms (10 s). By default, this is
            set to 600000 (10 min)."
        max_call_duration_ms:
          type: integer
          example: 3600000
          description:
            "Maximum allowed length for the call, will force end the call if
            reached. The minimum value allowed is 60,000 ms (1 min), and maximum
            value allowed is 7,200,000 (2 hours). By default, this is set to
            3,600,000 (1 hour)."
        voicemail_option:
          type: object
          properties:
            action:
              $ref: "#/components/schemas/VoicemailAction"
          required: [action]
          description:
            If this option is set, the call will try to detect voicemail in the
            first 3 minutes of the call. Actions defined (hangup, or leave a
            message) will be applied when the voicemail is detected. Set this to
            null to disable voicemail detection.
          example:
            {
              "action":
                {
                  "type": "static_text",
                  "text": "Please give us a callback tomorrow at 10am.",
                },
            }
          nullable: true
        post_call_analysis_data:
          type: array
          items:
            $ref: "#/components/schemas/AnalysisData"
          description:
            Post call analysis data to extract from the call. This data will
            augment the pre-defined variables extracted in the call analysis.
            This will be available after the call ends.
          nullable: true
        post_call_analysis_model:
          type: string
          enum: [gpt-4o-mini, gpt-4o]
          example: gpt-4o-mini
          description:
            The model to use for post call analysis. Currently only supports
            gpt-4o-mini and gpt-4o. Default to gpt-4o-mini.
        begin_message_delay_ms:
          type: integer
          example: 1000
          description:
            If set, will delay the first message by the specified amount of
            milliseconds, so that it gives user more time to prepare to take the
            call. Valid range is [0, 5000]. If not set or set to 0, agent will
            speak immediately. Only applicable when agent speaks first.
        ring_duration_ms:
          type: integer
          example: 30000
          description:
            If set, the phone ringing will last for the specified amount of
            milliseconds. This applies for both outbound call ringtime, and call
            transfer ringtime. Default to 30000 (30 s). Valid range is [5000,
            90000].
        stt_mode:
          type: string
          enum: [fast, accurate]
          example: fast
          description:
            If set, determines whether speech to text should focus on latency or
            accuracy. Default to fast mode.
        vocab_specialization:
          type: string
          enum: [general, medical]
          example: general
          description:
            If set, determines the vocabulary set to use for transcription. This
            setting only applies for English agents, for non English agent, this
            setting is a no-op. Default to general.
        allow_user_dtmf:
          type: boolean
          example: true
          description:
            If set to true, DTMF input will be accepted and processed. If false,
            any DTMF input will be ignored. Default to true.
        user_dtmf_options:
          type: object
          properties:
            digit_limit:
              type: integer
              description:
                The maximum number of digits allowed in the user's DTMF
                (Dual-Tone Multi-Frequency) input per turn. Once this limit is
                reached, the input is considered complete and a response will be
                generated immediately.
              nullable: true
              minimum: 1
              maximum: 50
            termination_key:
              type: string
              nullable: true
              description:
                A single key that signals the end of DTMF input. Acceptable
                values include any digit (0â€“9), the pound/hash symbol (#), or
                the asterisk (*).
              example: "#"
            timeout_ms:
              type: integer
              description:
                The time (in milliseconds) to wait for user DTMF input before
                timing out. The timer resets with each digit received.
              minimum: 1000
              maximum: 15000
          nullable: true
        denoising_mode:
          type: string
          enum: [noise-cancellation, noise-and-background-speech-cancellation]
          example: noise-cancellation
          description:
            If set, determines what denoising mode to use. Default to
            noise-cancellation.

    # Used for create get response.
    # No default, has required
    AgentResponse:
      allOf:
        - type: object
          required: [agent_id]
          properties:
            agent_id:
              type: string
              example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
              description: Unique id of agent.
            version:
              type: integer
              example: 0
              description: Version of the agent.
            is_published:
              type: boolean
              example: false
              description: Whether the agent is published.
        - $ref: "#/components/schemas/AgentRequest"
          required: [response_engine, voice_id]
        - type: object
          required: [last_modification_timestamp]
          properties:
            last_modification_timestamp:
              type: integer
              example: 1703413636133
              description:
                Last modification timestamp (milliseconds since epoch). Either
                the time of last update or creation if no updates available.

    RetellLLMResponse:
      allOf:
        - type: object
          required: [llm_id]
          properties:
            llm_id:
              type: string
              example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
              description: Unique id of Retell LLM Response Engine.
            version:
              type: integer
              example: 0
              description: Version of the Retell LLM Response Engine.
            is_published:
              type: boolean
              example: false
              description: Whether the Retell LLM Response Engine is published.
        - $ref: "#/components/schemas/RetellLlmRequest"
        - type: object
          required: [last_modification_timestamp]
          properties:
            last_modification_timestamp:
              type: integer
              example: 1703413636133
              description:
                Last modification timestamp (milliseconds since epoch). Either
                the time of last update or creation if no updates available.

    LLMModel:
      type: string
      enum:
        [
          gpt-4o,
          gpt-4o-mini,
          gpt-4.1,
          gpt-4.1-mini,
          gpt-4.1-nano,
          claude-3.7-sonnet,
          claude-3.5-haiku,
          gemini-2.0-flash,
          gemini-2.0-flash-lite,
        ]
      description: Available LLM models for conversation flows

    FinetuneExampleUtterance:
      oneOf:
        - type: object
          required: [role, content]
          properties:
            role:
              type: string
              enum: [agent, user]
            content:
              type: string
        - type: object
          required: [role, tool_call_id, name, arguments]
          properties:
            role:
              type: string
              enum: [tool_call_invocation]
            tool_call_id:
              type: string
            name:
              type: string
            arguments:
              type: string
        - type: object
          required: [role, tool_call_id, content]
          properties:
            role:
              type: string
              enum: [tool_call_result]
            tool_call_id:
              type: string
            content:
              type: string

    NodeInstructionPrompt:
      type: object
      required: [type, text]
      properties:
        type:
          type: string
          enum: [prompt]
          description: Type of instruction
        text:
          type: string
          description: The prompt text for the instruction

    NodeInstructionStaticText:
      type: object
      required: [type, text]
      properties:
        type:
          type: string
          enum: [static_text]
          description: Type of instruction
        text:
          type: string
          description: The static text for the instruction

    NodeInstruction:
      oneOf:
        - $ref: "#/components/schemas/NodeInstructionPrompt"
        - $ref: "#/components/schemas/NodeInstructionStaticText"

    # Node Base Properties
    NodeBase:
      type: object
      required: [id]
      properties:
        id:
          type: string
          description: Unique identifier for the node
        name:
          type: string
          description: Optional name for display purposes
        global_node_setting:
          $ref: "#/components/schemas/GlobalNodeSetting"
        display_position:
          type: object
          properties:
            x:
              type: number
            y:
              type: number
          description: Position for frontend display

    ConversationNode:
      allOf:
        - $ref: "#/components/schemas/NodeBase"
        - type: object
          required: [type, instruction]
          properties:
            type:
              type: string
              enum: [conversation]
              description: Type of the node
            instruction:
              $ref: "#/components/schemas/NodeInstruction"
            skip_response_edge:
              $ref: "#/components/schemas/SkipResponseEdge"
            edges:
              type: array
              items:
                $ref: "#/components/schemas/NodeEdge"
            finetune_conversation_examples:
              type: array
              items:
                $ref: "#/components/schemas/NodeFinetuneConversationExample"
            finetune_transition_examples:
              type: array
              items:
                $ref: "#/components/schemas/NodeFinetuneTransitionExample"
            model_choice:
              $ref: "#/components/schemas/ModelChoice"
            interruption_sensitivity:
              type: number
              minimum: 0
              maximum: 1

    EndNode:
      allOf:
        - $ref: "#/components/schemas/NodeBase"
        - type: object
          required: [type]
          properties:
            type:
              type: string
              enum: [end]
              description: Type of the node

    FunctionNode:
      allOf:
        - $ref: "#/components/schemas/NodeBase"
        - type: object
          required: [type, tool_id, tool_type, wait_for_result]
          properties:
            type:
              type: string
              enum: [function]
              description: Type of the node
            tool_id:
              type: string
              description: Tool ID for function nodes
            tool_type:
              type: string
              enum: [local, shared]
              description: Tool type for function nodes
            speak_during_execution:
              type: boolean
              description: Whether to speak during tool execution
            instruction:
              $ref: "#/components/schemas/NodeInstruction"
            wait_for_result:
              type: boolean
              description: Whether to wait for tool result
            edges:
              type: array
              items:
                $ref: "#/components/schemas/NodeEdge"
            finetune_transition_examples:
              type: array
              items:
                $ref: "#/components/schemas/NodeFinetuneTransitionExample"
            model_choice:
              $ref: "#/components/schemas/ModelChoice"
            interruption_sensitivity:
              type: number
              minimum: 0
              maximum: 1

    TransferCallNode:
      allOf:
        - $ref: "#/components/schemas/NodeBase"
        - type: object
          required: [type, transfer_destination, transfer_option, edge]
          properties:
            type:
              type: string
              enum: [transfer_call]
              description: Type of the node
            transfer_destination:
              $ref: "#/components/schemas/TransferDestination"
            custom_sip_headers:
              type: object
              additionalProperties:
                type: string
              description: Custom SIP headers for transfer calls
            transfer_option:
              type: object
              $ref: "#/components/schemas/TransferOption"
            edge:
              $ref: "#/components/schemas/TransferFailedEdge"
            model_choice:
              $ref: "#/components/schemas/ModelChoice"

    PressDigitNode:
      allOf:
        - $ref: "#/components/schemas/NodeBase"
        - type: object
          required: [type, instruction]
          properties:
            type:
              type: string
              enum: [press_digit]
              description: Type of the node
            instruction:
              $ref: "#/components/schemas/NodeInstructionPrompt"
            delay_ms:
              type: integer
              description: Delay in milliseconds before pressing the digit
            edges:
              type: array
              items:
                $ref: "#/components/schemas/NodeEdge"
            finetune_transition_examples:
              type: array
              items:
                $ref: "#/components/schemas/NodeFinetuneTransitionExample"
            model_choice:
              $ref: "#/components/schemas/ModelChoice"

    BranchNode:
      allOf:
        - $ref: "#/components/schemas/NodeBase"
        - type: object
          required: [type, else_edge]
          properties:
            type:
              type: string
              enum: [branch]
              description: Type of the node
            edges:
              type: array
              items:
                $ref: "#/components/schemas/NodeEdge"
            else_edge:
              $ref: "#/components/schemas/ElseEdge"
            finetune_transition_examples:
              type: array
              items:
                $ref: "#/components/schemas/NodeFinetuneTransitionExample"

    SmsNode:
      allOf:
        - $ref: "#/components/schemas/NodeBase"
        - type: object
          required: [type, instruction, success_edge, failed_edge]
          properties:
            type:
              type: string
              enum: [sms]
              description: Type of the node
            instruction:
              $ref: "#/components/schemas/NodeInstruction"
            success_edge:
              $ref: "#/components/schemas/SmsSuccessEdge"
            failed_edge:
              $ref: "#/components/schemas/SmsFailedEdge"

    ExtractDynamicVariablesNode:
      allOf:
        - $ref: "#/components/schemas/NodeBase"
        - type: object
          required: [type, variables]
          properties:
            type:
              type: string
              enum: [extract_dynamic_variables]
              description: Type of the node
            variables:
              type: array
              items:
                $ref: "#/components/schemas/AnalysisData"
            edges:
              type: array
              items:
                $ref: "#/components/schemas/NodeEdge"
            model_choice:
              $ref: "#/components/schemas/ModelChoice"
            finetune_transition_examples:
              type: array
              items:
                $ref: "#/components/schemas/NodeFinetuneTransitionExample"

    AgentSwapNode:
      allOf:
        - $ref: "#/components/schemas/NodeBase"
        - type: object
          required: [type, agent_id, post_call_analysis_setting, edge]
          properties:
            type:
              type: string
              enum: [agent_swap]
              description: Type of the node
            agent_id:
              type: string
              description: The ID of the agent to swap to
            agent_version:
              type: number
              description:
                The version of the agent to swap to. If not specified, will use
                the latest version
            post_call_analysis_setting:
              $ref: "#/components/schemas/PostCallAnalysisSetting"
              description: Post call analysis setting for the agent swap
            edge:
              $ref: "#/components/schemas/TransferFailedEdge"
              description: Edge to transition to if agent swap fails

    MCPNode:
      allOf:
        - $ref: "#/components/schemas/NodeBase"
        - type: object
          required: [type, mcp_id, mcp_tool_name, wait_for_result]
          properties:
            type:
              type: string
              enum: [mcp]
              description: Type of the node
            mcp_id:
              type: string
              description: Unique ID of the MCP server
            mcp_tool_name:
              type: string
              description: Name of the MCP tool to call
            edges:
              type: array
              items:
                $ref: "#/components/schemas/NodeEdge"
            response_variables:
              type: object
              additionalProperties:
                type: string
              description:
                Response variables to add to dynamic variables, key is the
                variable name, value is the path to the variable in the response
            speak_during_execution:
              type: boolean
              description: If true, will speak during execution
            instruction:
              $ref: "#/components/schemas/NodeInstruction"
              description:
                What to say when calling the function, only used when speak
                during execution
            wait_for_result:
              type: boolean
              description:
                If true, will wait for result before transitioning to next node
            finetune_transition_examples:
              type: array
              items:
                $ref: "#/components/schemas/NodeFinetuneTransitionExample"
            interruption_sensitivity:
              type: number
              minimum: 0
              maximum: 1

    ConversationFlowCustomTool:
      type: object
      required: [type, name, url]
      properties:
        type:
          type: string
          enum: [custom]
          description: Type of the tool
        name:
          type: string
          description: Name of the tool
        description:
          type: string
          maxLength: 1024
          description: Description of the tool
        parameters:
          $ref: "#/components/schemas/ToolParameter"
          description: Tool parameters schema
        url:
          type: string
          description:
            Server URL to call the tool. Dynamic variables can be used in the
            URL.
        headers:
          type: object
          additionalProperties:
            type: string
          description: Headers to add to the request
        method:
          type: string
          enum: [GET, POST, PUT, PATCH, DELETE]
          description: HTTP method to use for the request, defaults to POST
        timeout_ms:
          type: integer
          minimum: 1000
          maximum: 600000
          description:
            Timeout in milliseconds for the function call, defaults to 2 min
        query_params:
          type: object
          additionalProperties:
            type: string
          description: Query parameters to add to the request
        response_variables:
          type: object
          additionalProperties:
            type: string
          description:
            Response variables to add to the dynamic variables, key is the
            variable name, value is the path to the variable in the response

    NodeTool:
      allOf:
        - oneOf:
            - $ref: "#/components/schemas/ConversationFlowCustomTool"
            - $ref: "#/components/schemas/CheckAvailabilityCalTool"
            - $ref: "#/components/schemas/BookAppointmentCalTool"
        - type: object
          required: [tool_id]
          properties:
            tool_id:
              type: string
              description: Unique identifier for the tool

    ConversationFlowNode:
      oneOf:
        - $ref: "#/components/schemas/ConversationNode"
        - $ref: "#/components/schemas/EndNode"
        - $ref: "#/components/schemas/FunctionNode"
        - $ref: "#/components/schemas/TransferCallNode"
        - $ref: "#/components/schemas/PressDigitNode"
        - $ref: "#/components/schemas/BranchNode"
        - $ref: "#/components/schemas/SmsNode"
        - $ref: "#/components/schemas/ExtractDynamicVariablesNode"
        - $ref: "#/components/schemas/AgentSwapNode"
        - $ref: "#/components/schemas/MCPNode"

    ElseEdge:
      allOf:
        - $ref: "#/components/schemas/NodeEdge"
        - type: object
          required: [transition_condition]
          properties:
            transition_condition:
              type: object
              required: [type, prompt]
              properties:
                type:
                  type: string
                  enum: [prompt]
                prompt:
                  type: string
                  enum: ["Else"]
                  description: Must be "Else" for else edge

    SmsSuccessEdge:
      allOf:
        - $ref: "#/components/schemas/NodeEdge"
        - type: object
          required: [transition_condition]
          properties:
            transition_condition:
              type: object
              required: [type, prompt]
              properties:
                type:
                  type: string
                  enum: [prompt]
                prompt:
                  type: string
                  enum: ["Sent successfully"]
                  description: Must be "sent successfully" for SMS success edge

    SmsFailedEdge:
      allOf:
        - $ref: "#/components/schemas/NodeEdge"
        - type: object
          required: [transition_condition]
          properties:
            transition_condition:
              type: object
              required: [type, prompt]
              properties:
                type:
                  type: string
                  enum: [prompt]
                prompt:
                  type: string
                  enum: ["Failed to send"]
                  description: Must be "failed to send" for SMS failed edge

    SkipResponseEdge:
      allOf:
        - $ref: "#/components/schemas/NodeEdge"
        - type: object
          required: [transition_condition]
          properties:
            transition_condition:
              type: object
              required: [type, prompt]
              properties:
                type:
                  type: string
                  enum: [prompt]
                prompt:
                  type: string
                  enum: ["Skip response"]
                  description: Must be "Skip response" for skip response edge

    GlobalNodeFinetuneTransitionExample:
      type: object
      required: [transcript]
      properties:
        transcript:
          type: array
          items:
            $ref: "#/components/schemas/FinetuneExampleUtterance"
          description: Find tune the transition condition to this global node

    GlobalNodeSetting:
      type: object
      required: [condition]
      properties:
        condition:
          type: string
          description: Condition for global node activation, cannot be empty
        positive_finetune_examples:
          type: array
          items:
            $ref: "#/components/schemas/GlobalNodeFinetuneTransitionExample"
          description: Transition to this node
        negative_finetune_examples:
          type: array
          items:
            $ref: "#/components/schemas/GlobalNodeFinetuneTransitionExample"
          description: Don't transition to this node

    TransferFailedEdge:
      allOf:
        - $ref: "#/components/schemas/NodeEdge"
        - type: object
          required: [transition_condition]
          properties:
            transition_condition:
              type: object
              required: [type, prompt]
              properties:
                type:
                  type: string
                  enum: [prompt]
                prompt:
                  type: string
                  enum: ["Transfer failed"]
                  description:
                    Must be "Transfer failed" for transfer failed edge

    NodeEdge:
      type: object
      required: [id, transition_condition]
      properties:
        id:
          type: string
          description: Unique identifier for the edge
        transition_condition:
          oneOf:
            - $ref: "#/components/schemas/PromptCondition"
            - $ref: "#/components/schemas/EquationCondition"
        destination_node_id:
          type: string
          description: ID of the destination node

    PromptCondition:
      type: object
      required: [type, prompt]
      properties:
        type:
          type: string
          enum: [prompt]
        prompt:
          type: string
          description: Prompt condition text

    EquationCondition:
      type: object
      required: [type, equations, operator]
      properties:
        type:
          type: string
          enum: [equation]
        equations:
          type: array
          maxItems: 50
          items:
            $ref: "#/components/schemas/Equation"
        operator:
          type: string
          enum: ["||", "&&"]

    Equation:
      type: object
      required: [left, operator, right]
      properties:
        left:
          type: string
          description: Left side of the equation
        operator:
          type: string
          enum: ["==", "!=", ">", ">=", "<", "<=", "contains", "not_contains"]
        right:
          type: string
          description: Right side of the equation

    NodeFinetuneConversationExample:
      type: object
      required: [id, transcript]
      properties:
        id:
          type: string
          description: Unique identifier for the example
        transcript:
          type: array
          items:
            $ref: "#/components/schemas/FinetuneExampleUtterance"
          description:
            The example transcript to finetune how the conversation should be.

    NodeFinetuneTransitionExample:
      type: object
      required: [id, transcript]
      properties:
        id:
          type: string
          description: Unique identifier for the example
        transcript:
          type: array
          items:
            $ref: "#/components/schemas/FinetuneExampleUtterance"
          description:
            The example transcript to finetune how the node should transition.
        destination_node_id:
          type: string
          description: Optional destination node ID

    ModelChoiceCascading:
      type: object
      required: [type, model]
      properties:
        type:
          type: string
          enum: [cascading]
          description: Type of model choice
        model:
          $ref: "#/components/schemas/LLMModel"
          description: The LLM model to use
        high_priority:
          type: boolean
          description:
            Whether to use high priority pool with more dedicated resource,
            default false

    ModelChoice:
      oneOf:
        - $ref: "#/components/schemas/ModelChoiceCascading"

    ConversationFlowResponse:
      allOf:
        - $ref: "#/components/schemas/ConversationFlow"
        - type: object
          required: [conversation_flow_id, version]
          properties:
            conversation_flow_id:
              type: string
              description: Unique identifier for the conversation flow
            version:
              type: integer
              description: Version number of the conversation flow

    ConversationFlow:
      type: object
      properties:
        global_prompt:
          type: string
          example: "You are a helpful customer service agent."
          description:
            Global prompt used in every node of the conversation flow.
          nullable: true
        tools:
          type: array
          items:
            $ref: "#/components/schemas/NodeTool"
          description: Tools available in the conversation flow.
          example:
            [
              {
                "type": "custom",
                "name": "get_customer_info",
                "description": "Get customer information from database",
                "tool_id": "tool_001",
                "url": "https://api.example.com/customer",
                "method": "GET",
              },
            ]
          nullable: true
        start_node_id:
          type: string
          example: "start"
          description: ID of the start node in the conversation flow.
          nullable: true
        model_temperature:
          type: number
          minimum: 0
          maximum: 1
          example: 0.7
          description:
            Controls the randomness of the model's responses. Lower values make
            responses more deterministic.
          nullable: true
        tool_call_strict_mode:
          type: boolean
          example: true
          description:
            Whether to use strict mode for tool calls. Only applicable when
            using structured output models.
          nullable: true
        default_dynamic_variables:
          type: object
          additionalProperties:
            type: string
          example:
            { "company_name": "Retell Inc", "support_hours": "9 AM - 5 PM" }
          description:
            Default dynamic variables that can be referenced throughout the
            conversation flow.
          nullable: true
        knowledge_base_ids:
          type: array
          items:
            type: string
          example: ["kb_001", "kb_002"]
          description:
            Knowledge base IDs for RAG (Retrieval-Augmented Generation).
          nullable: true
        begin_tag_display_position:
          type: object
          properties:
            x:
              type: number
              example: 100
            y:
              type: number
              example: 200
          description: Display position for the begin tag in the frontend.
          nullable: true
        mcps:
          type: array
          items:
            $ref: "#/components/schemas/MCP"
          description:
            A list of MCP server configurations to use for this conversation
            flow.
          nullable: true
        start_speaker:
          type: string
          enum: [user, agent]
          example: "agent"
          description: Who starts the conversation - user or agent.
        model_choice:
          $ref: "#/components/schemas/ModelChoice"
          description: The model choice for the conversation flow.
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/ConversationFlowNode"
          description: Array of nodes in the conversation flow.
          example:
            [
              {
                "id": "start",
                "type": "conversation",
                "instruction":
                  {
                    "type": "prompt",
                    "text": "Greet the customer and ask how you can help them.",
                  },
                "edges":
                  [
                    {
                      "id": "edge_1",
                      "transition_condition":
                        {
                          "type": "prompt",
                          "prompt": "Customer wants to book appointment",
                        },
                      "destination_node_id": "book_appointment",
                    },
                  ],
              },
            ]

    CreateConversationFlowRequest:
      allOf:
        - $ref: "#/components/schemas/ConversationFlow"
        - type: object
          required: [start_speaker, model_choice, nodes]

    RetellLlmRequest:
      type: object
      properties:
        version:
          type: number
          example: 0
          description: Version of the Retell LLM.
          nullable: true
        model:
          type: string
          enum:
            [
              gpt-4o,
              gpt-4o-mini,
              gpt-4.1,
              gpt-4.1-mini,
              gpt-4.1-nano,
              claude-3.7-sonnet,
              claude-3.5-haiku,
              gemini-2.0-flash,
              gemini-2.0-flash-lite,
              null,
            ]
          example: gpt-4o
          description:
            Select the underlying text LLM. If not set, would default to gpt-4o.
          nullable: true
        s2s_model:
          type: string
          enum: [gpt-4o-realtime, gpt-4o-mini-realtime, null]
          example: gpt-4o-realtime
          description:
            Select the underlying speech to speech model. Can only set this or
            model, not both.
          nullable: true
        model_temperature:
          type: number
          example: 0
          description:
            If set, will control the randomness of the response. Value ranging
            from [0,1]. Lower value means more deterministic, while higher value
            means more random. If unset, default value 0 will apply. Note that
            for tool calling, a lower value is recommended.
        model_high_priority:
          type: boolean
          example: true
          description:
            If set to true, will enable fast tier, which uses high priority pool
            with more dedicated resource to ensure lower and more consistent
            latency, default to false. This feature usually comes with a higher
            cost.
        tool_call_strict_mode:
          type: boolean
          example: true
          description:
            Only applicable when model is gpt-4o or gpt-4o mini. If set to true,
            will use structured output to make sure tool call arguments follow
            the json schema. The time to save a new tool or change to a tool
            will be longer as additional processing is needed. Default to false.
        general_prompt:
          type: string
          example: "You are ..."
          description:
            "General prompt appended to system prompt no matter what state the
            agent is in. \n\n- System prompt (with state) = general prompt +
            state prompt.\n\n- System prompt (no state) = general prompt."
          nullable: true
        general_tools:
          type: array
          items:
            $ref: "#/components/schemas/Tool"
          description:
            "A list of tools the model may call (to get external knowledge, call
            API, etc). You can select from some common predefined tools like end
            call, transfer call, etc; or you can create your own custom tool
            (last option) for the LLM to use. \n\n- Tools of LLM (with state) =
            general tools + state tools + state transitions\n\n- Tools of LLM
            (no state) = general tools"
          example:
            [
              {
                "type": "end_call",
                "name": "end_call",
                "description": "End the call with user.",
              },
            ]
          nullable: true
        states:
          type: array
          items:
            $ref: "#/components/schemas/State"
          description:
            States of the LLM. This is to help reduce prompt length and tool
            choices when the call can be broken into distinct states. With
            shorter prompts and less tools, the LLM can better focus and follow
            the rules, minimizing hallucination. If this field is not set, the
            agent would only have general prompt and general tools (essentially
            one state).
          example:
            [
              {
                "name": "information_collection",
                "state_prompt":
                  "You will follow the steps below to collect information...",
                "edges":
                  [
                    {
                      "destination_state_name": "appointment_booking",
                      "description": "Transition to book an appointment.",
                    },
                  ],
                "tools":
                  [
                    {
                      "type": "transfer_call",
                      "name": "transfer_to_support",
                      "description": "Transfer to the support team.",
                      "transfer_destination":
                        { "type": "predefined", "number": "16175551212" },
                      "transfer_option":
                        {
                          "type": "cold_transfer",
                          "show_transferee_as_caller": false,
                        },
                    },
                  ],
              },
              {
                "name": "appointment_booking",
                "state_prompt":
                  "You will follow the steps below to book an appointment...",
                "tools":
                  [
                    {
                      "type": "book_appointment_cal",
                      "name": "book_appointment",
                      "description": "Book an annual check up.",
                      "cal_api_key": "cal_live_xxxxxxxxxxxx",
                      "event_type_id": 60444,
                      "timezone": "America/Los_Angeles",
                    },
                  ],
              },
            ]
          nullable: true
        starting_state:
          type: string
          example: information_collection
          description:
            Name of the starting state. Required if states is not empty.
          nullable: true
        begin_message:
          type: string
          example: "Hey I am a virtual assistant calling from Retell Hospital."
          description:
            First utterance said by the agent in the call. If not set, LLM will
            dynamically generate a message. If set to "", agent will wait for
            user to speak first.
          nullable: true
        default_dynamic_variables:
          type: object
          additionalProperties:
            type: string
          example: { "customer_name": "John Doe" }
          description:
            Default dynamic variables represented as key-value pairs of strings.
            These are injected into your Retell LLM prompt and tool description
            when specific values are not provided in a request. Only applicable
            for Retell LLM.
          nullable: true
        knowledge_base_ids:
          type: array
          items:
            type: string
          description:
            A list of knowledge base ids to use for this resource. Set to null
            to remove all knowledge bases.
          nullable: true

    EndCallTool:
      type: object
      properties:
        type:
          type: string
          enum: [end_call]
        name:
          type: string
          description:
            Name of the tool. Must be unique within all tools available to LLM
            at any given time (general tools + state tools + state transitions).
            Must be consisted of a-z, A-Z, 0-9, or contain underscores and
            dashes, with a maximum length of 64 (no space allowed).
        description:
          type: string
          description:
            Describes what the tool does, sometimes can also include information
            about when to call the tool.
      required: [type, name]

    WarmTransferPrompt:
      type: object
      properties:
        type:
          type: string
          enum: [prompt]
        prompt:
          type: string
          example: Summarize the call in one sentence for the warn handoff.
          description:
            The prompt to be used for warm handoff. Can contain dynamic
            variables.

    WarmTransferStaticMessage:
      type: object
      properties:
        type:
          type: string
          enum: [static_message]
        message:
          type: string
          example: You can take it from here.
          description:
            The static message to be used for warm handoff. Can contain dynamic
            variables.

    TransferOptionColdTransfer:
      type: object
      properties:
        type:
          type: string
          enum: [cold_transfer]
          description: The type of the transfer.
        show_transferee_as_caller:
          type: boolean
          description:
            If set to true, will show transferee (the user, not the AI agent) as
            caller when transferring, requires the telephony side to support SIP
            REFER to PSTN. This is only applicable for cold transfer, so if warm
            transfer option is specified, this field will be ignored. Default to
            false (default to show AI agent as caller).
      required: [type]

    TransferOptionWarmTransfer:
      type: object
      properties:
        type:
          type: string
          enum: [warm_transfer]
          description: The type of the transfer.
        agent_detection_timeout_ms:
          type: number
          description: The time to wait before considering transfer fails.
        on_hold_music:
          type: string
          enum: [none, relaxing_sound, uplifting_beats, ringtone]
          description: The music to play while the caller is being transferred.
        public_handoff_option:
          type: object
          oneOf:
            - $ref: "#/components/schemas/WarmTransferPrompt"
            - $ref: "#/components/schemas/WarmTransferStaticMessage"
          description:
            If set, when transfer is successful, will say the handoff message to
            both the transferee and the agent receiving the transfer. Can leave
            either a static message or a dynamic one based on prompt. Set to
            null to disable warm handoff.
        private_handoff_option:
          type: object
          oneOf:
            - $ref: "#/components/schemas/WarmTransferPrompt"
            - $ref: "#/components/schemas/WarmTransferStaticMessage"
          description:
            If set, when transfer is connected, will say the handoff message
            only to the agent receiving the transfer. Can leave either a static
            message or a dynamic one based on prompt. Set to null to disable
            warm handoff.
        opt_out_human_detection:
          type: boolean
          description:
            If set to true, will not perform human detection for the transfer.
            Default to false.
        opt_out_initial_message:
          type: boolean
          description:
            If set to true, AI will not say "Hello" after connecting the call.
            Default to false.
      required: [type]

    TransferOption:
      oneOf:
        - $ref: "#/components/schemas/TransferOptionColdTransfer"
        - $ref: "#/components/schemas/TransferOptionWarmTransfer"

    PostCallAnalysisSetting:
      type: string
      enum:
        - both_agents
        - only_destination_agent

    SmsContent:
      oneOf:
        - $ref: "#/components/schemas/SmsContentPredefined"
        - $ref: "#/components/schemas/SmsContentInferred"
    SmsContentPredefined:
      type: object
      properties:
        type:
          type: string
          enum: [predefined]
        content:
          type: string
          description:
            The static message to be sent in the SMS. Can contain dynamic
            variables.
    SmsContentInferred:
      type: object
      properties:
        type:
          type: string
          enum: [inferred]
        prompt:
          type: string
          description:
            The prompt to be used to help infer the SMS content. The model will
            take the global prompt, the call transcript, and this prompt
            together to deduce the right message to send. Can contain dynamic
            variables.

    TransferDestinationPredefined:
      type: object
      properties:
        type:
          type: string
          enum: [predefined]
          description: The type of transfer destination.
        number:
          type: string
          description:
            "The number to transfer to in E.164 format or a dynamic variable
            like {{transfer_number}}."
      required: [type, number]

    TransferDestinationInferred:
      type: object
      properties:
        type:
          type: string
          enum: [inferred]
          description: The type of transfer destination.
        prompt:
          type: string
          description:
            The prompt to be used to help infer the transfer destination. The
            model will take the global prompt, the call transcript, and this
            prompt together to deduce the right number to transfer to. Can
            contain dynamic variables.
      required: [type, prompt]

    TransferDestination:
      oneOf:
        - $ref: "#/components/schemas/TransferDestinationPredefined"
        - $ref: "#/components/schemas/TransferDestinationInferred"

    TransferCallTool:
      type: object
      properties:
        type:
          type: string
          enum: [transfer_call]
        name:
          type: string
          example: transfer_to_support
          description:
            Name of the tool. Must be unique within all tools available to LLM
            at any given time (general tools + state tools + state edges).
        description:
          type: string
          description:
            Describes what the tool does, sometimes can also include information
            about when to call the tool.
        transfer_destination:
          $ref: "#/components/schemas/TransferDestination"
        transfer_option:
          type: object
          $ref: "#/components/schemas/TransferOption"
        custom_sip_headers:
          type: object
          additionalProperties:
            type: string
          example: { "X-Custom-Header": "Custom Value" }
          description: Custom SIP headers to be added to the call.
      required: [type, name, transfer_destination, transfer_option]

    CheckAvailabilityCalTool:
      type: object
      properties:
        type:
          type: string
          enum: [check_availability_cal]
        name:
          type: string
          description:
            Name of the tool. Must be unique within all tools available to LLM
            at any given time (general tools + state tools + state transitions).
            Must be consisted of a-z, A-Z, 0-9, or contain underscores and
            dashes, with a maximum length of 64 (no space allowed).
        description:
          type: string
          description:
            Describes what the tool does, sometimes can also include information
            about when to call the tool.
        cal_api_key:
          type: string
          description:
            Cal.com Api key that have access to the cal.com event you want to
            check availability for.
        event_type_id:
          type: number
          description:
            Cal.com event type id number for the cal.com event you want to check
            availability for.
        timezone:
          type: string
          description:
            Timezone to be used when checking availability, must be in [IANA
            timezone
            database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
            If not specified, will check if user specified timezone in call, and
            if not, will use the timezone of the Retell servers.
      required: [type, name, cal_api_key, event_type_id]

    BookAppointmentCalTool:
      type: object
      properties:
        type:
          type: string
          enum: [book_appointment_cal]
        name:
          type: string
          description:
            Name of the tool. Must be unique within all tools available to LLM
            at any given time (general tools + state tools + state transitions).
            Must be consisted of a-z, A-Z, 0-9, or contain underscores and
            dashes, with a maximum length of 64 (no space allowed).
        description:
          type: string
          description:
            Describes what the tool does, sometimes can also include information
            about when to call the tool.
        cal_api_key:
          type: string
          description:
            Cal.com Api key that have access to the cal.com event you want to
            book appointment.
        event_type_id:
          type: number
          description:
            Cal.com event type id number for the cal.com event you want to book
            appointment.
        timezone:
          type: string
          description:
            Timezone to be used when booking appointment, must be in [IANA
            timezone
            database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
            If not specified, will check if user specified timezone in call, and
            if not, will use the timezone of the Retell servers.
      required: [type, name, cal_api_key, event_type_id]

    PressDigitTool:
      type: object
      properties:
        type:
          type: string
          enum: [press_digit]
        name:
          type: string
          description:
            Name of the tool. Must be unique within all tools available to LLM
            at any given time (general tools + state tools + state transitions).
            Must be consisted of a-z, A-Z, 0-9, or contain underscores and
            dashes, with a maximum length of 64 (no space allowed).
        description:
          type: string
          description:
            Describes what the tool does, sometimes can also include information
            about when to call the tool.
        delay_ms:
          type: integer
          description:
            Delay in milliseconds before pressing the digit, because a lot of
            IVR systems speak very slowly, and a delay can make sure the agent
            hears the full menu. Default to 1000 ms (1s). Valid range is 0 to
            5000 ms (inclusive).
      required: [type, name]

    CustomTool:
      type: object
      properties:
        type:
          type: string
          enum: [custom]
        name:
          type: string
          description:
            Name of the tool. Must be unique within all tools available to LLM
            at any given time (general tools + state tools + state edges). Must
            be consisted of a-z, A-Z, 0-9, or contain underscores and dashes,
            with a maximum length of 64 (no space allowed).
        url:
          type: string
          description:
            Describes what the tool does, sometimes can also include information
            about when to call the tool.
        description:
          type: string
          description: Describes what this tool does and when to call this tool.
        method:
          type: string
          enum: [GET, POST, PUT, PATCH, DELETE]
          description: Method to use for the request, default to POST.
        headers:
          type: object
          additionalProperties:
            type: string
          example: { "Authorization": "Bearer 1234567890" }
          description: Headers to add to the request.
        query_params:
          type: object
          additionalProperties:
            type: string
          example: { "page": "1", "sort": "asc" }
          description: Query parameters to append to the request URL.
        parameters:
          $ref: "#/components/schemas/ToolParameter"
        response_variables:
          type: object
          additionalProperties:
            type: string
          example: { "user_name": "data.user.name" }
          description:
            A mapping of variable names to JSON paths in the response body.
            These values will be extracted from the response and made available
            as dynamic variables for use.
        speak_during_execution:
          type: boolean
          description:
            Determines whether the agent would say sentence like "One moment,
            let me check that." when executing the function. Recommend to turn
            on if your function call takes over 1s (including network) to
            complete, so that your agent remains responsive.
        speak_after_execution:
          type: boolean
          description:
            Determines whether the agent would call LLM another time and speak
            when the result of function is obtained. Usually this needs to get
            turned on so user can get update for the function call.
        execution_message_description:
          type: string
          description:
            The description for the sentence agent say during execution. Only
            applicable when speak_during_execution is true. Can write what to
            say or even provide examples. The default is "The message you will
            say to callee when calling this tool. Make sure it fits into the
            conversation smoothly.".
        timeout_ms:
          type: integer
          description:
            The maximum time in milliseconds the tool can run before it's
            considered timeout. If the tool times out, the agent would have that
            info. The minimum value allowed is 1000 ms (1 s), and maximum value
            allowed is 600,000 ms (10 min). By default, this is set to 120,000
            ms (2 min).
      required: [type, name, url, description, speak_after_execution]

    ExtractDynamicVariableTool:
      type: object
      properties:
        type:
          type: string
          enum: [extract_dynamic_variable]
        name:
          type: string
          description:
            Name of the tool. Must be unique within all tools available to LLM
            at any given time (general tools + state tools + state edges). Must
            be consisted of a-z, A-Z, 0-9, or contain underscores and dashes,
            with a maximum length of 64 (no space allowed).
        description:
          type: string
          description:
            Describes what the tool does, sometimes can also include information
            about when to call the tool.
        variables:
          type: array
          items:
            $ref: "#/components/schemas/AnalysisData"
          description: The variables to be extracted.
      required: [type, name, variables, description]

    AgentSwapTool:
      type: object
      properties:
        name:
          type: string
          description:
            Name of the tool. Must be unique within all tools available to LLM
            at any given time (general tools + state tools + state edges).
        type:
          type: string
          enum: [agent_swap]
        description:
          type: string
          description:
            Describes what the tool does, sometimes can also include information
            about when to call the tool.
        agent_id:
          type: string
          description: The id of the agent to swap to.
        agent_version:
          type: number
          description:
            The version of the agent to swap to. If not specified, will use the
            latest version.
        speak_during_execution:
          type: boolean
        execution_message_description:
          type: string
          description:
            The message for the agent to speak when executing agent swap.
        post_call_analysis_setting:
          $ref: "#/components/schemas/PostCallAnalysisSetting"
      required: [type, name, agent_id]

    MCPTool:
      type: object
      properties:
        type:
          type: string
          enum: [mcp]
        mcp_id:
          type: string
          description: Unique id of the MCP.
        name:
          type: string
          description: Name of the MCP tool.
        description:
          type: string
          description: Description of the MCP tool.
        input_schema:
          type: object
          additionalProperties:
            type: string
          description: The input schema of the MCP tool.
      required: [type, name, description]

    SendSMSTool:
      type: object
      properties:
        name:
          type: string
          description:
            Name of the tool. Must be unique within all tools available to LLM
            at any given time (general tools + state tools + state edges).
        type:
          type: string
          enum: [send_sms]
        description:
          type: string
          description:
            Describes what the tool does, sometimes can also include information
            about when to call the tool.
        sms_content:
          $ref: "#/components/schemas/SmsContent"
      required: [type, name, sms_content]

    MCP:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
          description: The URL of the MCP server.
        headers:
          type: object
          additionalProperties:
            type: string
          example: { "Authorization": "Bearer 1234567890" }
          description: Headers to add to the MCP connection request.
        query_params:
          type: object
          additionalProperties:
            type: string
          example: { "index": "1", "key": "value" }
          description:
            Query parameters to append to the  MCP connection request URL.
        timeout_ms:
          type: integer
          description:
            Maximum time to wait for a connection to be established (in
            milliseconds). Default to 120,000 ms (2 minutes).
      required: [name, url]

    Tool:
      oneOf:
        - $ref: "#/components/schemas/EndCallTool"
        - $ref: "#/components/schemas/TransferCallTool"
        - $ref: "#/components/schemas/CheckAvailabilityCalTool"
        - $ref: "#/components/schemas/BookAppointmentCalTool"
        - $ref: "#/components/schemas/PressDigitTool"
        - $ref: "#/components/schemas/CustomTool"
        - $ref: "#/components/schemas/ExtractDynamicVariableTool"
        - $ref: "#/components/schemas/AgentSwapTool"
        - $ref: "#/components/schemas/MCPTool"
        - $ref: "#/components/schemas/SendSMSTool"

    State:
      type: object
      required: [name]
      properties:
        name:
          example: information_collection
          type: string
          description:
            Name of the state, must be unique for each state. Must be consisted
            of a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum
            length of 64 (no space allowed).
        state_prompt:
          example: "## Task\nYou will follow the steps below..."
          type: string
          description:
            "Prompt of the state, will be appended to the system prompt of LLM.
            \n\n - System prompt = general prompt + state prompt."
        edges:
          type: array
          items:
            $ref: "#/components/schemas/StateEdge"
          description:
            Edges of the state define how and what state can be reached from
            this state.
        tools:
          type: array
          items:
            $ref: "#/components/schemas/Tool"
          description:
            "A list of tools specific to this state the model may call (to get
            external knowledge, call API, etc). You can select from some common
            predefined tools like end call, transfer call, etc; or you can
            create your own custom tool (last option) for the LLM to use. \n\n-
            Tools of LLM = general tools + state tools + state transitions"

    StateEdge:
      type: object
      required: [destination_state_name, description]
      properties:
        destination_state_name:
          type: string
          description:
            The destination state name when going through transition of state
            via this edge. State transition internally is implemented as a tool
            call of LLM, and a tool call with name
            "transition_to_{destination_state_name}" will get created. Feel free
            to reference it inside the prompt.
        description:
          type: string
          description:
            Describes what's the transition and at what time / criteria should
            this transition happen.
        parameters:
          $ref: "#/components/schemas/ToolParameter"
          description:
            Describes what parameters you want to extract out when the
            transition changes. The parameters extracted here can be referenced
            in prompts & function descriptions of later states via dynamic
            variables. The parameters the functions accepts, described as a JSON
            Schema object. See [JSON Schema
            reference](https://json-schema.org/understanding-json-schema/) for
            documentation about the format.

    ToolParameter:
      type: object
      description:
        The parameters the functions accepts, described as a JSON Schema object.
        See [JSON Schema
        reference](https://json-schema.org/understanding-json-schema/) for
        documentation about the format. Omitting parameters defines a function
        with an empty parameter list.
      required: [type, properties]
      properties:
        type:
          type: string
          enum: [object]
          description: Type must be "object" for a JSON Schema object.
        properties:
          type: object
          additionalProperties: {}
          description:
            The value of properties is an object, where each key is the name of
            a property and each value is a schema used to validate that
            property.
        required:
          type: array
          items:
            type: string
          description:
            List of names of required property when generating this parameter.
            LLM will do its best to generate the required properties in its
            function arguments. Property must exist in properties.

    PhoneNumberResponse:
      type: object
      required:
        - phone_number
        - last_modification_timestamp
      properties:
        phone_number:
          type: string
          example: "+14157774444"
          description:
            E.164 format of the number (+country code, then number with no
            space, no special characters), used as the unique identifier for
            phone number APIs.
        phone_number_type:
          type: string
          enum: [retell-twilio, retell-telnyx, custom]
          example: retell-twilio
          description: Type of the phone number.
        phone_number_pretty:
          type: string
          example: "+1 (415) 777-4444"
          description: Pretty printed phone number, provided for your reference.
        inbound_agent_id:
          type: string
          example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
          description:
            Unique id of agent to bind to the number. The number will
            automatically use the agent when receiving inbound calls. If null,
            this number would not accept inbound call.
          nullable: true
        outbound_agent_id:
          type: string
          example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
          description:
            Unique id of agent to bind to the number. The number will
            automatically use the agent when conducting outbound calls. If null,
            this number would not be able to initiate outbound call without
            agent id override.
          nullable: true
        inbound_agent_version:
          type: integer
          example: 1
          description:
            Version of the inbound agent to bind to the number. If not provided,
            will default to latest version.
          nullable: true
        outbound_agent_version:
          type: integer
          example: 1
          description:
            Version of the outbound agent to bind to the number. If not
            provided, will default to latest version.
          nullable: true
        area_code:
          type: integer
          example: 415
          description:
            Area code of the number to obtain. Format is a 3 digit integer.
            Currently only supports US area code.
        nickname:
          type: string
          example: "Frontdesk Number"
          description: Nickname of the number. This is for your reference only.
          nullable: true
        inbound_webhook_url:
          type: string
          example: "https://example.com/inbound-webhook"
          description:
            If set, will send a webhook for inbound calls, where you can to
            override agent id, set dynamic variables and other fields specific
            to that call.
          nullable: true
        last_modification_timestamp:
          type: integer
          example: 1703413636133
          description:
            Last modification timestamp (milliseconds since epoch). Either the
            time of last update or creation if no updates available.

    VoiceResponse:
      type: object
      required:
        - voice_id
        - voice_name
        - provider
        - gender
      properties:
        voice_id:
          type: string
          example: "11labs-Adrian"
          description: Unique id for the voice.
        voice_name:
          type: string
          example: "Adrian"
          description: Name of the voice.
        provider:
          type: string
          enum: [elevenlabs, openai, deepgram]
          example: elevenlabs
          description: Indicates the provider of voice.
        accent:
          type: string
          example: American
          description: Accent annotation of the voice.
        gender:
          type: string
          enum: [male, female]
          example: male
          description: Gender of voice.
        age:
          type: string
          example: Young
          description: Age annotation of the voice.
        preview_audio_url:
          type: string
          example: "https://retell-utils-public.s3.us-west-2.amazonaws.com/adrian.mp3"
          description: URL to the preview audio of the voice.

    KnowledgeBaseRequest:
      type: object
      required: [knowledge_base_name]
      properties:
        knowledge_base_name:
          type: string
          example: "Sample KB"
          description:
            Name of the knowledge base. Must be less than 40 characters.
        knowledge_base_texts:
          type: array
          items:
            type: object
            required: [title, text]
            properties:
              title:
                type: string
                description: Title of the text.
              text:
                type: string
                description: Text to add to the knowledge base.
          description: Texts to add to the knowledge base.
        knowledge_base_files:
          type: array
          items:
            type: string
            format: binary
          description:
            Files to add to the knowledge base. Limit to 25 files, where each
            file is limited to 50MB.
        knowledge_base_urls:
          type: array
          items:
            type: string
          example: ["https://www.example.com", "https://www.retellai.com"]
          description:
            URLs to be scraped and added to the knowledge base. Must be valid
            urls.
        enable_auto_refresh:
          type: boolean
          example: true
          description:
            Whether to enable auto refresh for the knowledge base urls. If set
            to true, will retrieve the data from the specified url every 12
            hours.

    KnowledgeBaseAddSourcesRequest:
      type: object
      properties:
        knowledge_base_texts:
          type: array
          items:
            type: object
            required: [title, text]
            properties:
              title:
                type: string
                description: Title of the text.
              text:
                type: string
                description: Text to add to the knowledge base.
          description: Texts to add to the knowledge base.
        knowledge_base_files:
          type: array
          items:
            type: string
            format: binary
          description:
            Files to add to the knowledge base. Limit to 25 files, where each
            file is limited to 50MB.
        knowledge_base_urls:
          type: array
          items:
            type: string
          example: ["https://www.example.com", "https://www.retellai.com"]
          description:
            URLs to be scraped and added to the knowledge base. Must be valid
            urls.

    KnowledgeBaseSourceDocument:
      type: object
      required: [type, source_id, filename, file_url, file_size]
      properties:
        type:
          type: string
          enum: ["document"]
          description: Type of the knowledge base source.
        source_id:
          type: string
          description: Unique id of the knowledge base source.
        filename:
          type: string
          description: Filename of the document.
        file_url:
          type: string
          description: URL of the document stored.

    KnowledgeBaseSourceText:
      type: object
      required: [type, source_id, title, content_url]
      properties:
        type:
          type: string
          enum: ["text"]
          description: Type of the knowledge base source.
        source_id:
          type: string
          description: Unique id of the knowledge base source.
        title:
          type: string
          description: Title of the text.
        content_url:
          type: string
          description: URL of the text content stored.

    KnowledgeBaseSourceUrl:
      type: object
      required: [type, source_id, url]
      properties:
        type:
          type: string
          enum: ["url"]
          description: Type of the knowledge base source.
        source_id:
          type: string
          description: Unique id of the knowledge base source.
        url:
          type: string
          description: URL used to be scraped and added to the knowledge base.

    KnowledgeBaseResponse:
      type: object
      required: [knowledge_base_id, knowledge_base_name, status]
      properties:
        knowledge_base_id:
          type: string
          example: "knowledge_base_a456426614174000"
          description: Unique id of the knowledge base.
        knowledge_base_name:
          type: string
          example: "Sample KB"
          description:
            Name of the knowledge base. Must be less than 40 characters.
        status:
          type: string
          enum: ["in_progress", "complete", "error"]
          example: "in_progress"
          description:
            Status of the knowledge base. When it's created and being processed,
            it's "in_progress". When the processing is done, it's "complete".
            When there's an error in processing, it's "error".
        knowledge_base_sources:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/KnowledgeBaseSourceDocument"
              - $ref: "#/components/schemas/KnowledgeBaseSourceText"
              - $ref: "#/components/schemas/KnowledgeBaseSourceUrl"
          description:
            Sources of the knowledge base. Will be populated after the
            processing is done (when status is "complete").
        enable_auto_refresh:
          type: boolean
          example: true
          description:
            Whether to enable auto refresh for the knowledge base urls. If set
            to true, will retrieve the data from the specified url every 12
            hours.
        last_refreshed_timestamp:
          type: integer
          example: 1703413636133
          description:
            Last refreshed timestamp (milliseconds since epoch). Only applicable
            when enable_auto_refresh is true.

    BatchCallTask:
      type: object
      required: ["to_number"]
      properties:
        to_number:
          type: string
          example: "+12137774445"
          description:
            The The number you want to call, in E.164 format. If using a number
            purchased from Retell, only US numbers are supported as destination.
        retell_llm_dynamic_variables:
          type: object
          additionalProperties: {}
          example: { "customer_name": "John Doe" }
          description:
            Add optional dynamic variables in key value pairs of string that
            injects into your Response Engine prompt and tool description. Only
            applicable for Response Engine.

    BatchCallResponse:
      type: object
      required:
        [
          "batch_call_id",
          "name",
          "from_number",
          "scheduled_timestamp",
          "total_task_count",
        ]
      properties:
        batch_call_id:
          type: string
          example: "batch_call_dbcc4412483ebfc348abb"
          description: Unique id of the batch call.
        name:
          type: string
          example: "First batch call"
        from_number:
          type: string
          example: "+14157774444"
        scheduled_timestamp:
          type: number
          example: 1735718400
        total_task_count:
          type: number
          description: Number of tasks within the batch call

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum: ["error"]
              message:
                type: string
                example: "Invalid request format, please check API reference."
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum: ["error"]
              message:
                type: string
                example: "API key is missing or invalid."
    PaymentRequired:
      description: Payment Required
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum: ["error"]
              message:
                type: string
                example: "Trial has ended, please add payment method."
    UnprocessableContent:
      description: Unprocessable Content
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum: ["error"]
              message:
                type: string
                example: "Cannot find requested asset under given api key."
    TooManyRequests:
      description: Too Many Requests
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum: ["error"]
              message:
                type: string
                example: "Account rate limited, please throttle your requests."
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum: ["error"]
              message:
                type: string
                example: "An unexpected server error occurred."
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum: ["error"]
              message:
                type: string
                example: "The requested resource was not found."

security:
  - api_key: []

paths:
  # V2 call apis
  /v2/create-web-call:
    post:
      description: Create a new web call
      operationId: createWebCall
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [agent_id]
              properties:
                agent_id:
                  type: string
                  example: "oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD"
                  description:
                    Unique id of agent used for the call. Your agent would
                    contain the LLM Websocket url used for this call.
                agent_version:
                  type: integer
                  example: 1
                  description: The version of the agent to use for the call.
                metadata:
                  type: object
                  description:
                    An arbitrary object for storage purpose only. You can put
                    anything here like your internal customer id associated with
                    the call. Not used for processing. You can later get this
                    field from the call object.
                retell_llm_dynamic_variables:
                  type: object
                  additionalProperties: {}
                  example: { "customer_name": "John Doe" }
                  description:
                    Add optional dynamic variables in key value pairs of string
                    that injects into your Response Engine prompt and tool
                    description. Only applicable for Response Engine.
      responses:
        "201":
          description: Successfully created a web call.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V2WebCallResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v2/create-phone-call:
    post:
      description: Create a new outbound phone call
      operationId: createPhoneCall
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [from_number, to_number]
              properties:
                from_number:
                  type: string
                  example: "+14157774444"
                  description:
                    The number you own in E.164 format. Must be a number
                    purchased from Retell or imported to Retell.
                to_number:
                  type: string
                  example: "+12137774445"
                  description:
                    The number you want to call, in E.164 format. If using a
                    number purchased from Retell, only US numbers are supported
                    as destination.
                override_agent_id:
                  type: string
                  example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
                  description:
                    For this particular call, override the agent used with this
                    agent id. This does not bind the agent to this number, this
                    is for one time override.
                override_agent_version:
                  type: integer
                  example: 1
                  description:
                    For this particular call, override the agent version used
                    with this version. This does not bind the agent version to
                    this number, this is for one time override.
                metadata:
                  type: object
                  description:
                    An arbitrary object for storage purpose only. You can put
                    anything here like your internal customer id associated with
                    the call. Not used for processing. You can later get this
                    field from the call object.
                retell_llm_dynamic_variables:
                  type: object
                  additionalProperties: {}
                  example: { "customer_name": "John Doe" }
                  description:
                    Add optional dynamic variables in key value pairs of string
                    that injects into your Response Engine prompt and tool
                    description. Only applicable for Response Engine.
                custom_sip_headers:
                  type: object
                  additionalProperties:
                    type: string
                  example: { "X-Custom-Header": "Custom Value" }
                  description: Add optional custom SIP headers to the call.
      responses:
        "201":
          description: Successfully made an outbound call.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V2PhoneCallResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v2/register-phone-call:
    post:
      description: Register a new phone call for custom telephony
      operationId: registerPhoneCall
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [agent_id]
              properties:
                agent_id:
                  type: string
                  example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
                  description: The agent to use for the call.
                agent_version:
                  type: integer
                  example: 1
                  description: The version of the agent to use for the call.
                from_number:
                  type: string
                  example: "+14157774444"
                  description:
                    The number you own in E.164 format. Stored for tracking
                    purpose.
                to_number:
                  type: string
                  example: "+12137774445"
                  description:
                    The number you want to call, in E.164 format. Stored for
                    tracking purpose.
                direction:
                  type: string
                  enum: [inbound, outbound]
                  example: inbound
                  description:
                    Direction of the phone call. Stored for tracking purpose.
                metadata:
                  type: object
                  description:
                    An arbitrary object for storage purpose only. You can put
                    anything here like your internal customer id associated with
                    the call. Not used for processing. You can later get this
                    field from the call object.
                retell_llm_dynamic_variables:
                  type: object
                  additionalProperties: {}
                  example: { "customer_name": "John Doe" }
                  description:
                    Add optional dynamic variables in key value pairs of string
                    that injects into your Response Engine prompt and tool
                    description. Only applicable for Response Engine.
      responses:
        "201":
          description: Successfully registered a phone call.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V2PhoneCallResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v2/get-call/{call_id}:
    get:
      description: Retrieve details of a specific call
      operationId: getCall
      parameters:
        - in: path
          name: call_id
          schema:
            type: string
            example: 119c3f8e47135a29e65947eeb34cf12d
          required: true
          description: The call id to retrieve call history for.
      responses:
        "200":
          description: Successfully retrieved a call.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V2CallResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v2/delete-call/{call_id}:
    delete:
      description: Delete a specific call and its associated data
      operationId: deleteCall
      parameters:
        - in: path
          name: call_id
          schema:
            type: string
            example: 119c3f8e47135a29e65947eeb34cf12d
          required: true
          description: The call id to delete.
      responses:
        "204":
          description: Call successfully deleted. No content returned.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v2/list-calls:
    post:
      description: Retrieve call details
      operationId: listCalls
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter_criteria:
                  type: object
                  description: Filter criteria for the calls to retrieve.
                  example:
                    {
                      "agent_id": ["agent_oBeDLoLOeuAbiuaMFXRtDOLriT12345"],
                      "call_status": ["ended"],
                      "call_type": ["phone_call"],
                      "direction": ["inbound"],
                      "user_sentiment": ["Positive"],
                      "call_successful": [true],
                      "start_timestamp":
                        {
                          "upper_threshold": 1738475421000,
                          "lower_threshold": 1738475411000,
                        },
                    }
                  properties:
                    agent_id:
                      type: array
                      items:
                        type: string
                      description:
                        Only retrieve calls that are made with specific
                        agent(s).
                    version:
                      type: array
                      items:
                        type: integer
                      description: The version of the agent to use for the call.
                    call_status:
                      type: array
                      items:
                        type: string
                        enum: [registered, not_connected, ongoing, ended, error]
                      description:
                        Only retrieve calls with specific call status(es).
                    in_voicemail:
                      type: array
                      items:
                        type: boolean
                      description:
                        Only retrieve calls that are in voicemail or not in
                        voicemail.
                    disconnection_reason:
                      type: array
                      items:
                        type: string
                        enum:
                          [
                            user_hangup,
                            agent_hangup,
                            call_transfer,
                            voicemail_reached,
                            inactivity,
                            max_duration_reached,
                            concurrency_limit_reached,
                            no_valid_payment,
                            scam_detected,
                            dial_busy,
                            dial_failed,
                            dial_no_answer,
                            invalid_destination,
                            telephony_provider_permission_denied,
                            telephony_provider_unavailable,
                            sip_routing_error,
                            marked_as_spam,
                            user_declined,
                            error_llm_websocket_open,
                            error_llm_websocket_lost_connection,
                            error_llm_websocket_runtime,
                            error_llm_websocket_corrupt_payload,
                            error_no_audio_received,
                            error_asr,
                            error_retell,
                            error_unknown,
                            error_user_not_joined,
                            registered_call_timeout,
                          ]
                      description:
                        Only retrieve calls with specific disconnection
                        reason(s).
                    from_number:
                      type: array
                      items:
                        type: string
                      description:
                        Only retrieve calls with specific from number(s).
                    to_number:
                      type: array
                      items:
                        type: string
                      description:
                        Only retrieve calls with specific to number(s).
                    call_type:
                      type: array
                      items:
                        type: string
                        enum: [web_call, phone_call]
                      description:
                        Only retrieve calls with specific call type(s).
                    direction:
                      type: array
                      items:
                        type: string
                        enum: [inbound, outbound]
                      description:
                        Only retrieve calls with specific direction(s).
                    user_sentiment:
                      type: array
                      items:
                        type: string
                        enum: [Negative, Positive, Neutral, Unknown]
                      description:
                        Only retrieve calls with specific user sentiment(s).
                    call_successful:
                      type: array
                      items:
                        type: boolean
                      description:
                        Only retrieve calls with specific call successful(s).
                    start_timestamp:
                      type: object
                      properties:
                        upper_threshold:
                          type: integer
                        lower_threshold:
                          type: integer
                      description:
                        Only retrieve calls with specific range of start
                        timestamp(s).
                    duration_ms:
                      type: object
                      properties:
                        upper_threshold:
                          type: integer
                        lower_threshold:
                          type: integer
                      description:
                        Only retrieve calls with specific range of duration(s).
                    e2e_latency_p50:
                      type: object
                      properties:
                        upper_threshold:
                          type: integer
                        lower_threshold:
                          type: integer
                sort_order:
                  type: string
                  enum: [ascending, descending]
                  default: descending
                  description:
                    The calls will be sorted by `start_timestamp`, whether to
                    return the calls in ascending or descending order.
                limit:
                  type: integer
                  default: 50
                  description:
                    Limit the number of calls returned. Default 50, Max 1000. To
                    retrieve more than 1000, use pagination_key to continue
                    fetching the next page.
                pagination_key:
                  type: string
                  description:
                    The pagination key to continue fetching the next page of
                    calls. Pagination key is represented by a call id here, and
                    it's exclusive (not included in the fetched calls). The last
                    call id from the list calls is usually used as pagination
                    key here. If not set, will start from the beginning.
      responses:
        "200":
          description: Successfully retrieved calls.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/V2CallResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /create-agent:
    post:
      description: Create a new agent
      operationId: createAgent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/AgentRequest"
                - required: [response_engine, voice_id]
      responses:
        "201":
          description: Successfully created a new agent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /get-agent/{agent_id}:
    get:
      description: Retrieve details of a specific agent
      operationId: getAgent
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
            example: 16b980523634a6dc504898cda492e939
          required: true
          description: Unique id of the agent to be retrieved.
        - in: query
          name: version
          schema:
            type: integer
            example: 1
          required: false
          description:
            Optional version of the API to use for this request. If not
            provided, will default to latest version.
      responses:
        "200":
          description: Successfully retrieved an agent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /list-agents:
    get:
      description: List all agents
      operationId: listAgents
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            example: 50
          required: false
          description:
            A limit on the number of objects to be returned. Limit can range
            between 1 and 1000, and the default is 1000.
        - in: query
          name: pagination_key
          schema:
            type: string
            example: agent_1ffdb9717444d0e77346838911
          required: false
          allowEmptyValue: true
          description:
            The pagination key to continue fetching the next page of agents.
            Pagination key is represented by a agent id, pagination key and
            version pair is exclusive (not included in the fetched page). If not
            set, will start from the beginning.
        - in: query
          name: pagination_key_version
          schema:
            type: integer
            example: 0
          required: false
          allowEmptyValue: true
          description:
            Specifies the version of the agent associated with the
            pagination_key. When paginating, both the pagination_key and its
            version must be provided to ensure consistent ordering and to fetch
            the next page correctly.
      responses:
        "200":
          description: Successfully retrieved all agents.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AgentResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /get-agent-versions/{agent_id}:
    get:
      description: Get all versions of an agent
      operationId: getAgentVersions
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
            example: 16b980523634a6dc504898cda492e939
          required: true
          description: Unique id of the agent versions to be retrieved.
      responses:
        "200":
          description: Successfully retrieved all versions of an agent.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AgentResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /update-agent/{agent_id}:
    patch:
      description: Update an existing agent
      operationId: updateAgent
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
            example: 16b980523634a6dc504898cda492e939
          required: true
          description: Unique id of the agent to be updated.
        - in: query
          name: version
          schema:
            type: integer
            example: 1
          required: false
          description:
            Optional version of the API to use for this request. Default to
            latest version.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgentRequest"
            example:
              agent_name: Jarvis
      responses:
        "200":
          description: Successfully updated an agent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /delete-agent/{agent_id}:
    delete:
      description: Delete an existing agent
      operationId: deleteAgent
      parameters:
        - in: path
          name: agent_id
          schema:
            type: string
            example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
          required: true
          description:
            Unique id of the agent to be deleted. Deletes all versions of the
            agent.
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /create-retell-llm:
    post:
      description:
        Create a new Retell LLM Response Engine that can be attached to an
        agent. This is used to generate response output for the agent.
      operationId: createRetellLLM
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetellLlmRequest"
      responses:
        "201":
          description: Successfully created a new Retell LLM Response Engine.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetellLLMResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /get-retell-llm/{llm_id}:
    get:
      description: Retrieve details of a specific Retell LLM Response Engine
      operationId: getRetellLLM
      parameters:
        - in: path
          name: llm_id
          schema:
            type: string
            example: 16b980523634a6dc504898cda492e939
          required: true
          description:
            Unique id of the Retell LLM Response Engine to be retrieved.
        - in: query
          name: version
          schema:
            type: integer
            example: 1
          required: false
          description:
            Optional version of the API to use for this request. Default to
            latest version.
      responses:
        "200":
          description: Successfully retrieved an Retell LLM Response Engine.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetellLLMResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /list-retell-llms:
    get:
      description:
        List all Retell LLM Response Engines that can be attached to an agent.
      operationId: listRetellLLM
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            example: 50
          required: false
          description:
            A limit on the number of objects to be returned. Limit can range
            between 1 and 1000, and the default is 1000.
        - in: query
          name: pagination_key
          schema:
            type: string
            example: llm_1ffdb9717444d0e77346838911
          required: false
          allowEmptyValue: true
          description:
            The pagination key to continue fetching the next page of LLMs.
            Pagination key is represented by a llm id, pagination key and
            version pair is exclusive (not included in the fetched page). If not
            set, will start from the beginning.
        - in: query
          name: pagination_key_version
          schema:
            type: integer
            example: 0
          required: false
          allowEmptyValue: true
          description:
            Specifies the version of the llm associated with the pagination_key.
            When paginating, both the pagination_key and its version must be
            provided to ensure consistent ordering and to fetch the next page
            correctly.
      responses:
        "200":
          description: Successfully retrieved all Retell LLM Response Engines.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RetellLLMResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /update-retell-llm/{llm_id}:
    patch:
      description: Update an existing Retell LLM Response Engine
      operationId: updateRetellLLM
      parameters:
        - in: path
          name: llm_id
          schema:
            type: string
            example: 16b980523634a6dc504898cda492e939
          required: true
          description:
            Unique id of the Retell LLM Response Engine to be updated.
        - in: query
          name: version
          schema:
            type: integer
            example: 1
          required: false
          description:
            Optional version of the API to use for this request. Default to
            latest version.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetellLlmRequest"
            example:
              begin_message:
                Hey I am a virtual assistant calling from Retell Hospital.
      responses:
        "200":
          description: Successfully updated an Retell LLM Response Engine.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetellLLMResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /delete-retell-llm/{llm_id}:
    delete:
      description: Delete an existing Retell LLM Response Engine
      operationId: deleteRetellLLM
      parameters:
        - in: path
          name: llm_id
          schema:
            type: string
            example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
          required: true
          description:
            Unique id of the Retell LLM Response Engine to be deleted. Deletes
            all versions of the Retell LLM Response Engine.
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /create-conversation-flow:
    post:
      description:
        Create a new Conversation Flow that can be attached to an agent. This is
        used to generate response output for the agent.
      operationId: createConversationFlow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateConversationFlowRequest"
      responses:
        "201":
          description: Successfully created a conversation flow
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationFlowResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /update-conversation-flow/{conversation_flow_id}:
    patch:
      description: Update an existing conversation flow
      operationId: updateConversationFlow
      parameters:
        - in: path
          name: conversation_flow_id
          schema:
            type: string
          required: true
          description: Unique id of the conversation flow to be updated.
        - in: query
          name: version
          schema:
            type: string
          description: Version of the conversation flow to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConversationFlow"
      responses:
        "200":
          description: Successfully updated the conversation flow
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationFlowResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /get-conversation-flow/{conversation_flow_id}:
    get:
      description: Retrieve details of a specific Conversation Flow
      operationId: getConversationFlow
      parameters:
        - in: path
          name: conversation_flow_id
          schema:
            type: string
          required: true
          description: Unique id of the conversation flow to be retrieved.
        - in: query
          name: version
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved the conversation flow
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationFlowResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /list-conversation-flows:
    get:
      description: List all conversation flows that can be attached to an agent.
      operationId: listConversationFlows
      parameters:
        - in: query
          name: limit
          description:
            Limit the number of conversation flows returned. Default 1000, Max
            1000. To retrieve more than 1000, use pagination_key to continue
            fetching the next page.
          schema:
            type: integer
            default: 1000
            maximum: 1000
        - in: query
          name: pagination_key
          description:
            The pagination key to continue fetching the next page of
            conversation flows. Pagination key is represented by a conversation
            flow id here, and it's exclusive (not included in the fetched
            conversation flows). The last conversation flow id from the list
            conversation flows is usually used as pagination key here. If not
            set, will start from the beginning.
          schema:
            type: string
        - in: query
          name: pagination_key_version
          schema:
            type: integer
          description:
            Specifies the version of the conversation flow associated with the
            pagination_key. When paginating, both the pagination_key and its
            version must be provided to ensure consistent ordering and to fetch
            the next page correctly.
      responses:
        "200":
          description: Successfully retrieved conversation flows
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConversationFlowResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /delete-conversation-flow/{conversation_flow_id}:
    delete:
      description: Delete a conversation flow and all its versions
      operationId: deleteConversationFlow
      parameters:
        - in: path
          name: conversation_flow_id
          schema:
            type: string
          required: true
          description: Unique id of the conversation flow to be deleted.
      responses:
        "204":
          description: Successfully deleted the conversation flow
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # Phone number APIs
  /create-phone-number:
    post:
      description: Buy a new phone number & Bind agents
      operationId: createPhoneNumber
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                inbound_agent_id:
                  type: string
                  example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
                  description:
                    Unique id of agent to bind to the number. The number will
                    automatically use the agent when receiving inbound calls. If
                    null, this number would not accept inbound call.
                  nullable: true
                outbound_agent_id:
                  type: string
                  example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
                  description:
                    Unique id of agent to bind to the number. The number will
                    automatically use the agent when conducting outbound calls.
                    If null, this number would not be able to initiate outbound
                    call without agent id override.
                  nullable: true
                inbound_agent_version:
                  type: integer
                  example: 1
                  description:
                    Version of the inbound agent to bind to the number. If not
                    provided, will default to latest version.
                  nullable: true
                outbound_agent_version:
                  type: integer
                  example: 1
                  description:
                    Version of the outbound agent to bind to the number. If not
                    provided, will default to latest version.
                  nullable: true
                area_code:
                  type: integer
                  example: 415
                  description:
                    Area code of the number to obtain. Format is a 3 digit
                    integer. Currently only supports US area code.
                nickname:
                  type: string
                  example: "Frontdesk Number"
                  description:
                    Nickname of the number. This is for your reference only.
                inbound_webhook_url:
                  type: string
                  example: "https://example.com/inbound-webhook"
                  description:
                    If set, will send a webhook for inbound calls, where you can
                    to override agent id, set dynamic variables and other fields
                    specific to that call.
                  nullable: true
                number_provider:
                  type: string
                  enum: [twilio, telnyx]
                  example: twilio
                  description:
                    The provider to purchase the phone number from. Default to
                    twilio.
      responses:
        "201":
          description: Successfully created a new number.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhoneNumberResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import-phone-number:
    post:
      description: Import a phone number from custom telephony & Bind agents
      operationId: importPhoneNumber
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phone_number, termination_uri]
              properties:
                phone_number:
                  type: string
                  example: "+14157774444"
                  description:
                    The number you are trying to import in E.164 format of the
                    number (+country code, then number with no space, no special
                    characters), used as the unique identifier for phone number
                    APIs.
                termination_uri:
                  type: string
                  example: "someuri.pstn.twilio.com"
                  description:
                    The termination uri to uniquely identify your elastic SIP
                    trunk. This is used for outbound calls. For Twilio elastic
                    SIP trunks it always end with ".pstn.twilio.com".
                sip_trunk_auth_username:
                  type: string
                  example: "username"
                  description:
                    The username used for authentication for the SIP trunk.
                sip_trunk_auth_password:
                  type: string
                  example: "123456"
                  description:
                    The password used for authentication for the SIP trunk.
                inbound_agent_id:
                  type: string
                  example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
                  description:
                    Unique id of agent to bind to the number. The number will
                    automatically use the agent when receiving inbound calls. If
                    null, this number would not accept inbound call.
                  nullable: true
                outbound_agent_id:
                  type: string
                  example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
                  description:
                    Unique id of agent to bind to the number. The number will
                    automatically use the agent when conducting outbound calls.
                    If null, this number would not be able to initiate outbound
                    call without agent id override.
                inbound_agent_version:
                  type: integer
                  example: 1
                  description:
                    Version of the inbound agent to bind to the number. If not
                    provided, will default to latest version.
                  nullable: true
                outbound_agent_version:
                  type: integer
                  example: 1
                  description:
                    Version of the outbound agent to bind to the number. If not
                    provided, will default to latest version.
                  nullable: true
                nickname:
                  type: string
                  example: "Frontdesk Number"
                  description:
                    Nickname of the number. This is for your reference only.
                inbound_webhook_url:
                  type: string
                  example: "https://example.com/inbound-webhook"
                  description:
                    If set, will send a webhook for inbound calls, where you can
                    to override agent id, set dynamic variables and other fields
                    specific to that call.
                  nullable: true
      responses:
        "201":
          description: Successfully imported a number.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhoneNumberResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /get-phone-number/{phone_number}:
    get:
      description: Retrieve details of a specific phone number
      operationId: getPhoneNumber
      parameters:
        - in: path
          name: phone_number
          schema:
            type: string
            example: "+14157774444"
          required: true
          description:
            E.164 format of the number (+country code, then number with no
            space, no special characters), used as the unique identifier for
            phone number APIs.
      responses:
        "200":
          description: Successfully retrieved a phone number.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhoneNumberResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /list-phone-numbers:
    get:
      description: List all phone numbers
      operationId: listPhoneNumbers
      responses:
        "200":
          description: Successfully retrieved all phone numbers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PhoneNumberResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /update-phone-number/{phone_number}:
    patch:
      description: Update agent bound to a purchased phone number
      operationId: updatePhoneNumber
      parameters:
        - in: path
          name: phone_number
          schema:
            type: string
            example: "+14157774444"
          required: true
          description:
            E.164 format of the number (+country code, then number with no
            space, no special characters), used as the unique identifier for
            phone number APIs.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                inbound_agent_id:
                  type: string
                  example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
                  description:
                    Unique id of agent to bind to the number. The number will
                    automatically use the agent when receiving inbound calls. If
                    set to null, this number would not accept inbound call.
                  nullable: true
                outbound_agent_id:
                  type: string
                  example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
                  description:
                    Unique id of agent to bind to the number. The number will
                    automatically use the agent when conducting outbound calls.
                    If set to null, this number would not be able to initiate
                    outbound call without agent id override.
                  nullable: true
                inbound_agent_version:
                  type: integer
                  example: 1
                  description:
                    Version of the inbound agent to bind to the number. If not
                    provided, will default to latest version.
                  nullable: true
                outbound_agent_version:
                  type: integer
                  example: 1
                  description:
                    Version of the outbound agent to bind to the number. If not
                    provided, will default to latest version.
                  nullable: true
                nickname:
                  type: string
                  example: "Frontdesk Number"
                  description:
                    Nickname of the number. This is for your reference only.
                  nullable: true
                inbound_webhook_url:
                  type: string
                  example: "https://example.com/inbound-webhook"
                  description:
                    If set, will send a webhook for inbound calls, where you can
                    to override agent id, set dynamic variables and other fields
                    specific to that call.
                  nullable: true
            example:
              inbound_agent_id: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
              outbound_agent_id: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
              nickname: Frontdesk Number
      responses:
        "200":
          description: Successfully updated an phone number object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhoneNumberResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /delete-phone-number/{phone_number}:
    delete:
      description: Delete an existing phone number
      operationId: deletePhoneNumber
      parameters:
        - in: path
          name: phone_number
          schema:
            type: string
            example: "+14157774444"
          required: true
          description:
            E.164 format of the number (+country code, then number with no
            space, no special characters), used as the unique identifier for
            phone number APIs.
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /get-voice/{voice_id}:
    get:
      description: Retrieve details of a specific voice
      operationId: getVoice
      parameters:
        - in: path
          name: voice_id
          schema:
            type: string
            example: "11labs-Adrian"
          required: true
          description: Unique id for the voice.
      responses:
        "200":
          description: Successfully retrieved a voice.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoiceResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /list-voices:
    get:
      description: List all voices available to the user
      operationId: listVoices
      responses:
        "200":
          description: Successfully retrieved all voices.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VoiceResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /get-concurrency:
    get:
      description: Get the current concurrency and concurrency limit of the org
      operationId: getConcurrency
      responses:
        "200":
          description: Successfully retrieved a voice.
          content:
            application/json:
              schema:
                type: object
                properties:
                  current_concurrency:
                    type: integer
                    example: 10
                    description:
                      The current concurrency (amount of ongoing calls) of the
                      org.
                  concurrency_limit:
                    type: integer
                    example: 100
                    description:
                      The total concurrency limit (at max how many ongoing calls
                      one can make) of the org. This should be the sum of
                      `base_concurrency` and `purchased_concurrency`.
                  base_concurrency:
                    type: integer
                    example: 20
                    description: The free concurrency limit of the org.
                  purchased_concurrency:
                    type: integer
                    example: 80
                    description:
                      The amount of concurrency that the org has already
                      purchased.
                  concurrency_purchase_limit:
                    type: integer
                    example: 100
                    description:
                      The maximum amount of concurrency that the org can
                      purchase.
                  remaining_purchase_limit:
                    type: integer
                    example: 20
                    description:
                      The remaining amount of concurrency that the org can
                      purchase. This is the difference between
                      `concurrency_purchase_limit` and `purchased_concurrency`.
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /create-knowledge-base:
    post:
      description: Create a new knowledge base
      operationId: createKnowledgeBase
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/KnowledgeBaseRequest"
      responses:
        "201":
          description: Successfully created a new knowledge base.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnowledgeBaseResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /get-knowledge-base/{knowledge_base_id}:
    get:
      description: Retrieve details of a specific knowledge base
      operationId: getKnowledgeBase
      parameters:
        - in: path
          name: knowledge_base_id
          schema:
            type: string
            example: kb_1234567890
          required: true
          description: The knowledge base id to retrieve.
      responses:
        "200":
          description: Successfully retrieved a knowledge base.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnowledgeBaseResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /list-knowledge-bases:
    get:
      description: List all knowledge bases
      operationId: listKnowledgeBases
      responses:
        "200":
          description: Successfully retrieved all knowledge bases.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KnowledgeBaseResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /delete-knowledge-base/{knowledge_base_id}:
    delete:
      description: Delete an existing knowledge base
      operationId: deleteKnowledgeBase
      parameters:
        - in: path
          name: knowledge_base_id
          schema:
            type: string
            example: kb_1234567890
          required: true
          description: The knowledge base id to delete.
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /add-knowledge-base-sources/{knowledge_base_id}:
    post:
      description: Add sources to a knowledge base
      operationId: addKnowledgeBaseSources
      parameters:
        - in: path
          name: knowledge_base_id
          schema:
            type: string
            example: kb_1234567890
          required: true
          description: The knowledge base id to delete source from.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/KnowledgeBaseAddSourcesRequest"
      responses:
        "201":
          description: Successfully created a new knowledge base.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnowledgeBaseResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /delete-knowledge-base-source/{knowledge_base_id}/source/{source_id}:
    delete:
      description: Delete an existing source from knowledge base
      operationId: deleteKnowledgeBaseSource
      parameters:
        - in: path
          name: knowledge_base_id
          schema:
            type: string
            example: kb_1234567890
          required: true
          description: The knowledge base id to delete source from.
        - in: path
          name: source_id
          schema:
            type: string
            example: source_1234567890
          required: true
          description: The source id to delete.
      responses:
        "200":
          description: Successfully deleted a source from a knowledge base.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KnowledgeBaseResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /create-batch-call:
    post:
      description: Create a batch call
      operationId: createBatchCall
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["from_number", "tasks"]
              properties:
                name:
                  type: string
                  example: "First batch call"
                  description:
                    The name of the batch call. Only used for your own
                    reference.
                trigger_timestamp:
                  type: number
                  example: 1735718400000
                  description:
                    The scheduled time for sending the batch call, represented
                    as a Unix timestamp in milliseconds. If omitted, the call
                    will be sent immediately.
                from_number:
                  type: string
                  example: "+14157774444"
                  description:
                    The number you own in E.164 format. Must be a number
                    purchased from Retell or imported to Retell.
                tasks:
                  type: array
                  description:
                    A list of individual call tasks to be executed as part of
                    the batch call. Each task represents a single outbound call
                    and includes details such as the recipient's phone number
                    and optional dynamic variables to personalize the call
                    content.
                  items:
                    $ref: "#/components/schemas/BatchCallTask"
      responses:
        "201":
          description: Successfully created a batch call.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchCallResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v2/update-call/{call_id}:
    patch:
      description:
        Update metadata and sensitive data storage settings for an existing
        call.
      operationId: updateCallMetadata
      parameters:
        - in: path
          name: call_id
          schema:
            type: string
            example: call_a4441234567890777c4a4a123e6
          required: true
          description: The call id of the call to be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  type: object
                  description:
                    An arbitrary object for storage purpose only. You can put
                    anything here like your internal customer id associated with
                    the call. Not used for processing. You can later get this
                    field from the call object. Size limited to 50kB max.
                  example:
                    customer_id: cust_123
                    notes: Follow-up required
                opt_out_sensitive_data_storage:
                  type: boolean
                  description:
                    Whether this call opts out of sensitive data storage like
                    transcript, recording, logging. Can only be changed from
                    false to true.
                  example: true
              additionalProperties: false
            example:
              metadata:
                customer_id: cust_123
                notes: Follow-up required
              opt_out_sensitive_data_storage: true
      responses:
        "200":
          description: Call metadata updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V2CallResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /create-chat:
    post:
      description: Create a chat session
      operationId: createChat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [agent_id]
              properties:
                agent_id:
                  type: string
                  example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
                  description: The chat agent to use for the call.
                agent_version:
                  type: integer
                  example: 1
                  description:
                    The version of the chat agent to use for the chat. If not
                    provided, will default to latest version.
                metadata:
                  type: object
                  description:
                    An arbitrary object for storage purpose only. You can put
                    anything here like your internal customer id associated with
                    the chat. Not used for processing. You can later get this
                    field from the chat object.
                retell_llm_dynamic_variables:
                  type: object
                  additionalProperties: {}
                  example: { "customer_name": "John Doe" }
                  description:
                    Add optional dynamic variables in key value pairs of string
                    that injects into your Response Engine prompt and tool
                    description. Only applicable for Response Engine.
      responses:
        "201":
          description: Successfully registered a phone call.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /end-chat/{chat_id}:
    patch:
      description: End an ongoing chat
      operationId: endChat
      parameters:
        - in: path
          name: chat_id
          schema:
            type: string
            example: 16b980523634a6dc504898cda492e939
          required: true
          description: Unique id of the chat to be ended
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /get-chat/{chat_id}:
    get:
      description: Retrieve details of a specific chat
      operationId: getChat
      parameters:
        - in: path
          name: chat_id
          schema:
            type: string
            example: 16b980523634a6dc504898cda492e939
          required: true
          description: Unique id of the chat to be retrieved
      responses:
        "200":
          description: Successfully retrieved an chat.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /create-chat-completion:
    post:
      description: Create a chat completion message
      operationId: createChatCompletion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [chat_id, content]
              properties:
                chat_id:
                  type: string
                  example: oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD
                  description: Unique id of the chat to create completion.
                content:
                  type: string
                  example: hi how are you doing?
                  description: user message to generate agent chat completion.
      responses:
        "201":
          description: Successfully created chat completion.
          content:
            application/json:
              schema:
                type: object
                required: [messages]
                properties:
                  messages:
                    type: array
                    items:
                      $ref: "#/components/schemas/MessageOrToolCall"
                    description:
                      New messages generated by the agent during this
                      completion, including any tool call invocations and their
                      results. Does not include the original input messages.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "422":
          $ref: "#/components/responses/UnprocessableContent"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /list-chat:
    get:
      description: List all chats
      operationId: listChat
      responses:
        "200":
          description: Successfully retrieved all chats.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"